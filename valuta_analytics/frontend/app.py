import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import requests
import os
import json
import base64
from io import BytesIO
from scipy.stats import norm as stats_norm
from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–í–∞–ª—é—Ç–ê–Ω–∞–ª–∏—Ç–∏–∫–∞",
    page_icon="üí∞",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ API URL
API_URL = os.environ.get("API_URL", "http://backend:8000")

# –ë–∞–∑–æ–≤—ã–µ —Å—Ç–∏–ª–∏ CSS (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è)
st.markdown("""
<style>
    .main {
        background-color: #f8f9fa;
    }
    .stApp {
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
    }
    .card {
        background-color: white;
        border-radius: 0.5rem;
        padding: 1rem;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        margin-bottom: 1rem;
    }
    .header {
        margin-bottom: 1rem;
        padding: 0.5rem 0;
        border-bottom: 1px solid #e5e7eb;
    }
    .header h2 {
        margin: 0;
        font-size: 1.5rem;
        font-weight: 600;
    }
    .metric-row {
        display: flex;
        gap: 1rem;
        margin-bottom: 1rem;
    }
    .metric-card {
        background-color: white;
        border-radius: 0.5rem;
        padding: 0.75rem;
        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
        flex: 1;
    }
    .metric-title {
        font-size: 0.875rem;
        color: #6b7280;
        margin-bottom: 0.25rem;
    }
    .metric-value {
        font-size: 1.25rem;
        font-weight: 600;
    }
    .positive {
        color: #10b981;
    }
    .negative {
        color: #ef4444;
    }
    .neutral {
        color: #6b7280;
    }
    .metrics-table {
        width: 100%;
        border-collapse: collapse;
        margin: 1rem 0;
    }
    .metrics-table th {
        background-color: #f8f9fa;
        text-align: left;
        padding: 0.75rem;
        border-bottom: 1px solid #e5e7eb;
    }
    .metrics-table td {
        padding: 0.75rem;
        border-bottom: 1px solid #e5e7eb;
    }
    .model-quality {
        padding: 0.5rem 1rem;
        border-radius: 0.375rem;
        display: inline-block;
        font-weight: 600;
    }
    .model-quality.good {
        background-color: rgba(16, 185, 129, 0.1);
        color: #10b981;
    }
    .model-quality.medium {
        background-color: rgba(245, 158, 11, 0.1);
        color: #f59e0b;
    }
    .model-quality.poor {
        background-color: rgba(239, 68, 68, 0.1);
        color: #ef4444;
    }
</style>
""", unsafe_allow_html=True)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
@st.cache_data(ttl=300)
def get_currencies():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç"""
    try:
        response = requests.get(f"{API_URL}/currencies")
        response.raise_for_status()
        return response.json()
    except Exception as e:
        st.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞–ª—é—Ç–∞—Ö: {e}")
        return []

@st.cache_data(ttl=300)
def get_currency_history(currency_code, days=30):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç—ã"""
    try:
        response = requests.get(f"{API_URL}/currency/history/{currency_code}", params={"days": days})
        response.raise_for_status()
        data = response.json()
        df = pd.DataFrame(data)
        df['date'] = pd.to_datetime(df['date'])
        return df
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –≤–∞–ª—é—Ç—ã: {e}")
        return pd.DataFrame()

@st.cache_data(ttl=300)
def get_currency_statistics(currency_code, days=30):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≤–∞–ª—é—Ç–µ"""
    try:
        response = requests.get(f"{API_URL}/currency/statistics/{currency_code}", params={"days": days})
        response.raise_for_status()
        return response.json()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return None

def predict_currency(currency_code, days=7):
    """–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç—ã"""
    try:
        response = requests.post(f"{API_URL}/currency/predict/{currency_code}", params={"days": days})
        response.raise_for_status()
        result = response.json()
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –º–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ
        if "model_metrics" not in result:
            result["model_metrics"] = {}  # –î–æ–±–∞–≤–∏–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å, –µ—Å–ª–∏ –º–µ—Ç—Ä–∏–∫ –Ω–µ—Ç
        if "model_type" not in result:
            result["model_type"] = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å"
            
        return result
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
        return None

def update_current_data():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç"""
    try:
        response = requests.post(f"{API_URL}/data/update/current")
        response.raise_for_status()
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
        get_currencies.clear()
        get_last_update.clear()
        return response.json()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def update_historical_data(start_date, end_date, currencies=None):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        params = {
            "start_date": start_date,
            "end_date": end_date
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–ª—é—Ç—ã –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –µ—Å–ª–∏ –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã
        if currencies:
            response = requests.post(
                f"{API_URL}/data/update/historical",
                params=params,
                json={"currencies": currencies}
            )
        else:
            response = requests.post(
                f"{API_URL}/data/update/historical",
                params=params
            )
        
        response.raise_for_status()
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
        get_currencies.clear()
        get_currency_history.clear()
        get_currency_statistics.clear()
        get_last_update.clear()
        
        return response.json()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        return {"status": "error", "message": str(e)}

def train_model(currency_code, days=60):
    """–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
    try:
        response = requests.post(f"{API_URL}/model/train/{currency_code}", params={"days": days})
        response.raise_for_status()
        return response.json()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {e}")
        return None

@st.cache_data(ttl=300)
def get_last_update():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    try:
        response = requests.get(f"{API_URL}/last-update")
        response.raise_for_status()
        return response.json().get("last_update", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        return f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö: {str(e)}"

@st.cache_data(ttl=300)
def get_weather(city, days_history=30, predict=True):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞"""
    try:
        params = {"days_history": days_history, "predict": str(predict).lower()}
        response = requests.get(f"{API_URL}/weather/{city}", params=params)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ: {e}")
        return None

@st.cache_data(ttl=3600)
def get_popular_cities():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤"""
    try:
        response = requests.get(f"{API_URL}/weather/popular-cities")
        response.raise_for_status()
        return response.json()
    except Exception as e:
        st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤")
        return []

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –º–æ–¥–µ–ª–µ–π
def calculate_model_metrics(y_true, y_pred):
    """–†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏"""
    metrics = {}
    
    # R-–∫–≤–∞–¥—Ä–∞—Ç (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∞—Ü–∏–∏)
    metrics['r2'] = r2_score(y_true, y_pred)
    
    # –°—Ä–µ–¥–Ω—è—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ (MAE)
    metrics['mae'] = mean_absolute_error(y_true, y_pred)
    
    # –ö–æ—Ä–µ–Ω—å –∏–∑ —Å—Ä–µ–¥–Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ–π –æ—à–∏–±–∫–∏ (RMSE)
    metrics['rmse'] = np.sqrt(mean_squared_error(y_true, y_pred))
    
    # –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ (MAPE)
    metrics['mape'] = np.mean(np.abs((y_true - y_pred) / y_true)) * 100
    
    # –°—Ä–µ–¥–Ω—è—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ (MRE)
    metrics['mre'] = np.mean(np.abs(y_true - y_pred) / np.mean(y_true)) * 100
    
    return metrics

def evaluate_model_quality(r2_score):
    """–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –¥–µ—Ç–µ—Ä–º–∏–Ω–∞—Ü–∏–∏"""
    if r2_score >= 0.7:
        return "good", "–•–æ—Ä–æ—à–∞—è"
    elif r2_score >= 0.5:
        return "medium", "–°—Ä–µ–¥–Ω—è—è"
    else:
        return "poor", "–ù–∏–∑–∫–∞—è"

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def get_currency_emoji(code):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –≤–∞–ª—é—Ç—ã –ø–æ –∫–æ–¥—É"""
    emoji_dict = {
        'USD': 'üá∫üá∏', 'EUR': 'üá™üá∫', 'GBP': 'üá¨üáß', 'JPY': 'üáØüáµ', 
        'CNY': 'üá®üá≥', 'CHF': 'üá®üá≠', 'AUD': 'üá¶üá∫', 'CAD': 'üá®üá¶'
    }
    return emoji_dict.get(code, 'üí±')

def translate_day_of_week(day):
    """–ü–µ—Ä–µ–≤–æ–¥ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π"""
    translations = {
        'Monday': '–ü–Ω', 'Tuesday': '–í—Ç', 'Wednesday': '–°—Ä',
        'Thursday': '–ß—Ç', 'Friday': '–ü—Ç', 'Saturday': '–°–±', 'Sunday': '–í—Å'
    }
    return translations.get(day, day)

def check_api_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API"""
    try:
        response = requests.get(f"{API_URL}/")
        return True, response.status_code
    except Exception as e:
        return False, str(e)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def main():
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    with st.sidebar:
        st.title("–í–∞–ª—é—Ç–ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
        
        st.header("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å API
        api_status, status_details = check_api_connection()
        if api_status:
            st.success(f"API –¥–æ—Å—Ç—É–ø–µ–Ω (–∫–æ–¥: {status_details})")
        else:
            st.error(f"API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {status_details}")
            st.warning(f"URL API: {API_URL}")
        
        # –°–µ–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
with st.expander("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö", expanded=True):  # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("–¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã")
        
        # –ë–æ–ª–µ–µ –∑–∞–º–µ—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —Å–æ –∑–Ω–∞—á–∫–æ–º
        if st.button("üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã", key="load_current", use_container_width=True):
            with st.spinner('–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–∏—Ö –∫—É—Ä—Å–æ–≤...'):
                result = update_current_data()
                if result and result.get("status") == "success":
                    st.success(result["message"])
                else:
                    st.warning(result.get("message", "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"))
    
    with col2:
        st.subheader("–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
        last_update = get_last_update()
        
        if last_update != "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö":
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            try:
                last_update_date = datetime.strptime(last_update, "%Y-%m-%d")
                days_ago = (datetime.now() - last_update_date).days
                
                # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
                if days_ago == 0:
                    st.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è ‚úÖ")
                elif days_ago == 1:
                    st.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –≤—á–µ—Ä–∞ ‚ö†Ô∏è")
                elif days_ago <= 7:
                    st.warning(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ {days_ago} –¥–Ω–µ–π –Ω–∞–∑–∞–¥ ‚ö†Ô∏è")
                else:
                    st.error(f"–î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏! –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {days_ago} –¥–Ω–µ–π –Ω–∞–∑–∞–¥ ‚ùå")
            except:
                st.info(f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {last_update}")
        else:
            st.warning("–î–∞–Ω–Ω—ã–µ –µ—â–µ –Ω–µ –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    
    # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    st.markdown("---")
    
    st.subheader("–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
    
    # –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞
    col1, col2 = st.columns(2)
    with col1:
        historical_start = st.date_input(
            "–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞",
            datetime.now() - timedelta(days=30)
        )
    with col2:
        historical_end = st.date_input(
            "–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞",
            datetime.now()
        )
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞
    currencies = get_currencies()
    
    if currencies:
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤–∞–ª—é—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
        major_currencies = ['USD', 'EUR', 'GBP', 'JPY', 'CNY', 'CHF']
        currency_options = {}
        
        # –°–Ω–∞—á–∞–ª–∞ –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–∞–ª—é—Ç—ã
        for curr in currencies:
            if curr["code"] in major_currencies:
                currency_options[curr["code"]] = f"{curr['code']} - {curr['name']}"
        
        # –ó–∞—Ç–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∞–ª—é—Ç—ã
        for curr in currencies:
            if curr["code"] not in major_currencies:
                currency_options[curr["code"]] = f"{curr['code']} - {curr['name']}"
        
        # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        load_mode = st.radio(
            "–†–µ–∂–∏–º –∑–∞–≥—Ä—É–∑–∫–∏:",
            ["–í—Å–µ –≤–∞–ª—é—Ç—ã", "–í—ã–±—Ä–∞–Ω–Ω—ã–µ –≤–∞–ª—é—Ç—ã", "–û—Å–Ω–æ–≤–Ω—ã–µ –≤–∞–ª—é—Ç—ã"],
            horizontal=True
        )
        
        selected_currencies = []
        
        if load_mode == "–í—ã–±—Ä–∞–Ω–Ω—ã–µ –≤–∞–ª—é—Ç—ã":
            # –ú–Ω–æ–≥–æ–∫–æ–ª–æ–Ω–æ—á–Ω—ã–π –≤—ã–±–æ—Ä –≤–∞–ª—é—Ç
            num_cols = 3
            cols = st.columns(num_cols)
            
            # –û–ø—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ –∏ –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö/—Å–Ω—è—Ç–∏—è –≤—ã–±–æ—Ä–∞
            search_term = st.text_input("üîç –ü–æ–∏—Å–∫ –≤–∞–ª—é—Ç—ã", placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã")
            
            col1, col2 = st.columns(2)
            with col1:
                if st.button("–í—ã–±—Ä–∞—Ç—å –≤—Å–µ", key="select_all"):
                    st.session_state.selected_currencies = list(currency_options.keys())
            with col2:
                if st.button("–°–Ω—è—Ç—å –≤—ã–±–æ—Ä", key="deselect_all"):
                    st.session_state.selected_currencies = []
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
            if 'selected_currencies' not in st.session_state:
                st.session_state.selected_currencies = major_currencies.copy()
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∞–ª—é—Ç—ã –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
            filtered_currencies = {}
            if search_term:
                for code, name in currency_options.items():
                    if search_term.lower() in name.lower():
                        filtered_currencies[code] = name
            else:
                filtered_currencies = currency_options
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤–∞–ª—é—Ç—ã –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–ª–æ–Ω–æ–∫ —Å —á–µ–∫–±–æ–∫—Å–∞–º–∏
            currency_items = list(filtered_currencies.items())
            items_per_col = (len(currency_items) + num_cols - 1) // num_cols
            
            for i, col in enumerate(cols):
                start_idx = i * items_per_col
                end_idx = min((i + 1) * items_per_col, len(currency_items))
                
                for code, name in currency_items[start_idx:end_idx]:
                    selected = code in st.session_state.selected_currencies
                    if col.checkbox(name, value=selected, key=f"curr_{code}"):
                        if code not in st.session_state.selected_currencies:
                            st.session_state.selected_currencies.append(code)
                    else:
                        if code in st.session_state.selected_currencies:
                            st.session_state.selected_currencies.remove(code)
            
            selected_currencies = st.session_state.selected_currencies
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç
            st.info(f"–í—ã–±—Ä–∞–Ω–æ –≤–∞–ª—é—Ç: {len(selected_currencies)}")
            
        elif load_mode == "–û—Å–Ω–æ–≤–Ω—ã–µ –≤–∞–ª—é—Ç—ã":
            selected_currencies = major_currencies
            st.info(f"–ë—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–∞–ª—é—Ç—ã: {', '.join(selected_currencies)}")
    
    # –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º UX
    load_button = st.button("üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", key="load_history", use_container_width=True, type="primary")
    
    if load_button:
        with st.spinner('–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...'):
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞
            params = {
                "start_date": historical_start.strftime("%Y-%m-%d"),
                "end_date": historical_end.strftime("%Y-%m-%d")
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≤–∞–ª—é—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã
            if load_mode != "–í—Å–µ –≤–∞–ª—é—Ç—ã" and selected_currencies:
                result = update_historical_data(
                    historical_start.strftime("%Y-%m-%d"),
                    historical_end.strftime("%Y-%m-%d"),
                    selected_currencies
                )
            else:
                result = update_historical_data(
                    historical_start.strftime("%Y-%m-%d"),
                    historical_end.strftime("%Y-%m-%d")
                )
            
            if result and result.get("status") == "success":
                st.success(result["message"])
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
                get_currencies.clear()
                get_currency_history.clear()
                get_currency_statistics.clear()
                get_last_update.clear()
            else:
                st.warning(result.get("message", "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"))
        
        # –°–µ–∫—Ü–∏—è –º–æ–¥–µ–ª–∏
        with st.expander("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª—å—é"):
            currencies = get_currencies()
            currency_options = {curr["code"]: curr["name"] for curr in currencies} if currencies else {}
            
            if currency_options:
                selected_currency_code = st.selectbox(
                    "–í–∞–ª—é—Ç–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è",
                    options=list(currency_options.keys()),
                    format_func=lambda x: f"{x} - {currency_options[x]}"
                )
                
                training_days = st.slider("–î–Ω–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è", 30, 365, 60)
                
                if st.button("–û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å", key="train_model"):
                    result = train_model(selected_currency_code, training_days)
                    if result and result.get("status") == "success":
                        st.success(result["message"])
                    else:
                        st.warning(result.get("message", "–û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è"))
            else:
                st.warning("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –≤–∞–ª—é—Ç–∞—Ö")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
        st.caption(f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {get_last_update()}")
        st.caption("–í–µ—Ä—Å–∏—è 2.0.0")
    
    # –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
    tab1, tab2, tab3, tab4, tab5 = st.tabs(["üìä –¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã", "üìà –ê–Ω–∞–ª–∏–∑ –≤–∞–ª—é—Ç—ã", "üîÆ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ", "üå§ –ü–æ–≥–æ–¥–∞", "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ"])
    
    # –í–ö–õ–ê–î–ö–ê 1: –¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã
    with tab1:
        st.header("–¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç")
        st.caption(f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {get_last_update()}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–∞–ª—é—Ç—ã
        currencies = get_currencies()
        
        if currencies:
            # –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
            col1, col2 = st.columns([1, 2])
            
            with col1:
                st.subheader("–û—Å–Ω–æ–≤–Ω—ã–µ –≤–∞–ª—é—Ç—ã")
                
                # –í—ã–±–∏—Ä–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–∞–ª—é—Ç—ã
                main_currencies = ['USD', 'EUR', 'GBP', 'JPY', 'CNY', 'CHF']
                main_curr_data = [curr for curr in currencies if curr["code"] in main_currencies]
                
                for curr in main_curr_data:
                    st.metric(
                        label=f"{get_currency_emoji(curr['code'])} {curr['code']} - {curr['name']}",
                        value=f"{curr['rate']:.4f} ‚ÇΩ"
                    )
            
            with col2:
                st.subheader("–î–∏–Ω–∞–º–∏–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤–∞–ª—é—Ç")
                
                # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫
                fig = go.Figure()
                loaded_currencies = []
                
                for code in main_currencies:
                    currency_data = [curr for curr in currencies if curr["code"] == code]
                    if currency_data:
                        history = get_currency_history(code, 30)
                        if not history.empty:
                            fig.add_trace(go.Scatter(
                                x=history['date'],
                                y=history['value'],
                                mode='lines',
                                name=code
                            ))
                            loaded_currencies.append(code)
                
                if loaded_currencies:
                    fig.update_layout(
                        title="–ö—É—Ä—Å—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π",
                        xaxis_title="–î–∞—Ç–∞",
                        yaxis_title="–ö—É—Ä—Å –∫ —Ä—É–±–ª—é",
                        height=400,
                        hovermode="x unified"
                    )
                    st.plotly_chart(fig, use_container_width=True)
                else:
                    st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
            
            # –¢–∞–±–ª–∏—Ü–∞ –≤—Å–µ—Ö –≤–∞–ª—é—Ç
            st.subheader("–í—Å–µ –≤–∞–ª—é—Ç—ã")
            
            # –ü–æ–∏—Å–∫ –ø–æ –≤–∞–ª—é—Ç–∞–º
            search_term = st.text_input("–ü–æ–∏—Å–∫ –≤–∞–ª—é—Ç—ã")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            currency_df = pd.DataFrame([
                {"–ö–æ–¥": curr["code"], "–ù–∞–∑–≤–∞–Ω–∏–µ": curr["name"], "–ö—É—Ä—Å –∫ —Ä—É–±–ª—é": curr["rate"]}
                for curr in currencies if curr["rate"] is not None
            ])
            
            if search_term:
                filtered_df = currency_df[
                    currency_df["–ö–æ–¥"].str.contains(search_term, case=False) | 
                    currency_df["–ù–∞–∑–≤–∞–Ω–∏–µ"].str.contains(search_term, case=False)
                ]
                st.dataframe(filtered_df, use_container_width=True)
            else:
                st.dataframe(currency_df, use_container_width=True)
        else:
            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞–ª—é—Ç–∞—Ö. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å.")
    
    # –í–ö–õ–ê–î–ö–ê 2: –ê–Ω–∞–ª–∏–∑ –≤–∞–ª—é—Ç—ã
    with tab2:
        st.header("–ê–Ω–∞–ª–∏–∑ –≤–∞–ª—é—Ç—ã")
    
        currencies = get_currencies()
        currency_options = {curr["code"]: curr["name"] for curr in currencies} if currencies else {}
    
        if currency_options:
            # –£–ª—É—á—à–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã —Å –ø–æ–∏—Å–∫–æ–º
            st.subheader("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        
            # –í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            col1, col2, col3 = st.columns([2, 1, 1])
        
            with col1:
                # –ü–æ–∏—Å–∫ –≤–∞–ª—é—Ç—ã
                search_query = st.text_input("üîç –ü–æ–∏—Å–∫ –≤–∞–ª—é—Ç—ã", placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã")
            
                # –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∞–ª—é—Ç—ã –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
                filtered_options = {}
                if search_query:
                    for code, name in currency_options.items():
                        if search_query.lower() in code.lower() or search_query.lower() in name.lower():
                            filtered_options[code] = name
                else:
                    filtered_options = currency_options
            
                # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–ø—Ü–∏–π –¥–ª—è selectbox
                options_list = list(filtered_options.keys())
            
                if not options_list:
                    st.warning("–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª—é—Ç")
                    selected_code = None
                else:
                    selected_code = st.selectbox(
                        "–í–∞–ª—é—Ç–∞",
                        options=options_list,
                        format_func=lambda x: f"{x} - {currency_options[x]}"
                    )
        
            with col2:
                days_to_analyze = st.slider("–ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞", 7, 365, 30)
        
            with col3:
                chart_type = st.selectbox(
                    "–¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞",
                    options=["–õ–∏–Ω–∏—è", "–°–≤–µ—á–∏", "–ë–∞—Ä—ã"],
                    index=0
                )
        
            if selected_code:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                currency_history = get_currency_history(selected_code, days_to_analyze)
                stats = get_currency_statistics(selected_code, days_to_analyze)
            
                if not currency_history.empty and stats:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –±–æ–ª—å—à–∏–º —Ç–µ–∫—Å—Ç–æ–º —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º
                    if len(currency_history) > 1:
                        current_value = currency_history['value'].iloc[-1]
                        prev_value = currency_history['value'].iloc[-2]
                        change = ((current_value / prev_value) - 1) * 100
                        change_text = f"{change:+.2f}%"
                    else:
                        current_value = currency_history['value'].iloc[-1]
                        change_text = "N/A"
                
                    st.markdown(f"""
                    <div style="text-align: center; margin: 20px 0; padding: 10px; background-color: #f8f9fa; border-radius: 10px;">
                        <h2 style="margin-bottom: 5px;">{selected_code} - {currency_options[selected_code]}</h2>
                        <div style="display: flex; justify-content: center; align-items: center;">
                            <span style="font-size: 2.5rem; font-weight: bold; margin-right: 10px;">{current_value:.4f} ‚ÇΩ</span>
                            <span style="font-size: 1.2rem; color: {'green' if change_text.startswith('+') else 'red'};">{change_text}</span>
                        </div>
                        <p style="color: #6c757d; margin-top: 5px;">–ö—É—Ä—Å –Ω–∞ {currency_history['date'].iloc[-1].strftime('%d.%m.%Y')}</p>
                    </div>
                    """, unsafe_allow_html=True)
                
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –≤–∏–¥–µ –∫–∞—Ä—Ç–æ—á–µ–∫
                    st.subheader("–ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
                
                    # –ú–µ—Ç—Ä–∏–∫–∏ –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö
                    col1, col2, col3, col4 = st.columns(4)
                
                    with col1:
                        st.metric(
                            "–°—Ä–µ–¥–Ω–∏–π –∫—É—Ä—Å", 
                            f"{stats['avg_rate']:.4f} ‚ÇΩ"
                        )
                
                    with col2:
                        min_date = datetime.strptime(stats['min_date'], "%Y-%m-%d").strftime("%d.%m.%Y")
                        st.metric(
                            "–ú–∏–Ω–∏–º—É–º", 
                            f"{stats['min_rate']:.4f} ‚ÇΩ",
                            f"({min_date})"
                        )
                
                    with col3:
                        max_date = datetime.strptime(stats['max_date'], "%Y-%m-%d").strftime("%d.%m.%Y")
                        st.metric(
                            "–ú–∞–∫—Å–∏–º—É–º", 
                            f"{stats['max_rate']:.4f} ‚ÇΩ",
                            f"({max_date})"
                        )
                
                    with col4:
                        st.metric(
                            "–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å", 
                            f"{stats['volatility']:.2f}%"
                        )
                
                    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏
                    st.subheader("–î–∏–Ω–∞–º–∏–∫–∞ –∫—É—Ä—Å–∞")
                
                    # –í–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π
                    chart_tabs = st.tabs(["–û–±—â–∏–π –≥—Ä–∞—Ñ–∏–∫", "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑", "–°–µ–∑–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑", "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ"])
                
                    with chart_tabs[0]:
                        # –û—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫ –∫—É—Ä—Å–∞ (–ª–∏–Ω–µ–π–Ω—ã–π, —Å–≤–µ—á–Ω–æ–π –∏–ª–∏ –±–∞—Ä—ã)
                        if chart_type == "–õ–∏–Ω–∏—è":
                            fig = go.Figure()
                        
                            # –û—Å–Ω–æ–≤–Ω–∞—è –ª–∏–Ω–∏—è
                            fig.add_trace(go.Scatter(
                                x=currency_history['date'],
                                y=currency_history['value'],
                                mode='lines',
                                name=selected_code,
                                line=dict(width=2, color='blue')
                            ))
                        
                            # –°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ (–µ—Å–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö)
                            if len(currency_history) >= 7:
                                currency_history['ma7'] = currency_history['value'].rolling(window=7).mean()
                                fig.add_trace(go.Scatter(
                                    x=currency_history['date'],
                                    y=currency_history['ma7'],
                                    mode='lines',
                                    name='7-–¥–Ω–µ–≤–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ',
                                    line=dict(dash='dash', color='orange')
                                ))
                        
                            if len(currency_history) >= 21:
                                currency_history['ma21'] = currency_history['value'].rolling(window=21).mean()
                                fig.add_trace(go.Scatter(
                                    x=currency_history['date'],
                                    y=currency_history['ma21'],
                                    mode='lines',
                                    name='21-–¥–Ω–µ–≤–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ',
                                    line=dict(dash='dash', color='green')
                                ))
                    
                        elif chart_type == "–°–≤–µ—á–∏":
                            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–≤–µ—á–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
                            # –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è OHLC
                            # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–Ω–µ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                            # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω—ã –≤–Ω—É—Ç—Ä–∏–¥–Ω–µ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ OHLC
                        
                            # –°–Ω–∞—á–∞–ª–∞ —Ä–µ—Å–µ–º–ø–ª–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ –¥–Ω–µ–≤–Ω—ã—Ö
                            currency_history['date'] = pd.to_datetime(currency_history['date'])
                            currency_history.set_index('date', inplace=True)
                        
                            # –°–æ–∑–¥–∞–µ–º –ø—Å–µ–≤–¥–æ-OHLC –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                            # –í –Ω–∞—Å—Ç–æ—è—â–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—Å—Ç–æ—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ OHLC
                            pseudo_ohlc = pd.DataFrame()
                            pseudo_ohlc['open'] = currency_history['value']
                        
                            # –°–æ–∑–¥–∞–µ–º –ø—Å–µ–≤–¥–æ high/low –Ω–∞ –æ—Å–Ω–æ–≤–µ volatility
                            volatility_factor = stats['volatility'] / 100 / 2
                            pseudo_ohlc['high'] = pseudo_ohlc['open'] * (1 + np.random.uniform(0, volatility_factor, len(pseudo_ohlc)))
                            pseudo_ohlc['low'] = pseudo_ohlc['open'] * (1 - np.random.uniform(0, volatility_factor, len(pseudo_ohlc)))
                        
                            # Close - —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
                            pseudo_ohlc['close'] = pseudo_ohlc['open'].shift(-1)
                            pseudo_ohlc.dropna(inplace=True)
                        
                            # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –º–µ–Ω—è–µ–º close –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö —Å–≤–µ—á–µ–π
                            for i in range(len(pseudo_ohlc)):
                                if np.random.random() > 0.5:
                                    pseudo_ohlc.iloc[i, pseudo_ohlc.columns.get_loc('close')] = (
                                        pseudo_ohlc.iloc[i, pseudo_ohlc.columns.get_loc('open')] + 
                                        np.random.uniform(-volatility_factor, volatility_factor) * 
                                        pseudo_ohlc.iloc[i, pseudo_ohlc.columns.get_loc('open')]
                                    )
                        
                            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º high/low –Ω–∞ –æ—Å–Ω–æ–≤–µ open/close
                            for i in range(len(pseudo_ohlc)):
                                open_val = pseudo_ohlc.iloc[i, pseudo_ohlc.columns.get_loc('open')]
                                close_val = pseudo_ohlc.iloc[i, pseudo_ohlc.columns.get_loc('close')]
                                high_val = pseudo_ohlc.iloc[i, pseudo_ohlc.columns.get_loc('high')]
                                low_val = pseudo_ohlc.iloc[i, pseudo_ohlc.columns.get_loc('low')]
                            
                                high_val = max(high_val, open_val, close_val)
                                low_val = min(low_val, open_val, close_val)
                            
                                pseudo_ohlc.iloc[i, pseudo_ohlc.columns.get_loc('high')] = high_val
                                pseudo_ohlc.iloc[i, pseudo_ohlc.columns.get_loc('low')] = low_val
                        
                            # –°–æ–∑–¥–∞–µ–º —Å–≤–µ—á–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫
                            fig = go.Figure(data=[go.Candlestick(
                                x=pseudo_ohlc.index,
                                open=pseudo_ohlc['open'],
                                high=pseudo_ohlc['high'],
                                low=pseudo_ohlc['low'],
                                close=pseudo_ohlc['close'],
                                increasing_line_color='green',
                                decreasing_line_color='red'
                            )])
                        
                            # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫–æ–ª—å–∑—è—â—É—é —Å—Ä–µ–¥–Ω—é—é
                            if len(pseudo_ohlc) >= 7:
                                ma7 = pseudo_ohlc['close'].rolling(window=7).mean()
                                fig.add_trace(go.Scatter(
                                    x=ma7.index,
                                    y=ma7,
                                    mode='lines',
                                    name='7-–¥–Ω–µ–≤–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ',
                                    line=dict(dash='dash', color='blue')
                                ))
                    
                        elif chart_type == "–ë–∞—Ä—ã":
                            # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–∞—Ä—á–∞—Ä—Ç–∞
                            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                            currency_history['change'] = currency_history['value'].diff()
                            currency_history['color'] = ['green' if x > 0 else 'red' for x in currency_history['change']]
                        
                            fig = go.Figure(data=[go.Bar(
                                x=currency_history['date'],
                                y=currency_history['value'],
                                marker_color=currency_history['color']
                            )])
                    
                        # –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞
                        fig.update_layout(
                            title=f"–î–∏–Ω–∞–º–∏–∫–∞ –∫—É—Ä—Å–∞ {selected_code} –∑–∞ {days_to_analyze} –¥–Ω–µ–π",
                            xaxis_title="–î–∞—Ç–∞",
                            yaxis_title="–ö—É—Ä—Å –∫ —Ä—É–±–ª—é",
                            height=500,
                            hovermode="x unified",
                            legend=dict(
                                orientation="h",
                                yanchor="bottom",
                                y=1.02,
                                xanchor="right",
                                x=1
                            )
                        )
                    
                        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
                        col1, col2, col3 = st.columns(3)
                    
                        with col1:
                            show_trend = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–µ–Ω–¥", value=True)
                            if show_trend:
                                # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏—é —Ç—Ä–µ–Ω–¥–∞
                                x = np.array(range(len(currency_history))).reshape(-1, 1)
                                y = currency_history['value'].values
                            
                                model = LinearRegression()
                                model.fit(x, y)
                                trend = model.predict(x)
                            
                                fig.add_trace(go.Scatter(
                                    x=currency_history['date'],
                                    y=trend,
                                    mode='lines',
                                    name='–¢—Ä–µ–Ω–¥',
                                    line=dict(color='purple', width=2)
                                ))
                    
                        with col2:
                            show_bands = st.checkbox("–ü–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞", value=False)
                            if show_bands and len(currency_history) >= 10:
                                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞
                                window = 20
                                if len(currency_history) < window:
                                    window = len(currency_history) // 2
                            
                                currency_history['ma'] = currency_history['value'].rolling(window=window).mean()
                                currency_history['std'] = currency_history['value'].rolling(window=window).std()
                            
                                upper_band = currency_history['ma'] + (currency_history['std'] * 2)
                                lower_band = currency_history['ma'] - (currency_history['std'] * 2)
                            
                                fig.add_trace(go.Scatter(
                                    x=currency_history['date'],
                                    y=upper_band,
                                    mode='lines',
                                    name='–í–µ—Ä—Ö–Ω—è—è –ø–æ–ª–æ—Å–∞',
                                    line=dict(color='rgba(0, 128, 0, 0.3)')
                                ))
                            
                                fig.add_trace(go.Scatter(
                                    x=currency_history['date'],
                                    y=lower_band,
                                    mode='lines',
                                    name='–ù–∏–∂–Ω—è—è –ø–æ–ª–æ—Å–∞',
                                    line=dict(color='rgba(255, 0, 0, 0.3)')
                                ))
                            
                                # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–µ–∂–¥—É –ø–æ–ª–æ—Å–∞–º–∏
                                fig.add_trace(go.Scatter(
                                    x=pd.concat([currency_history['date'], currency_history['date'][::-1]]),
                                    y=pd.concat([upper_band, lower_band[::-1]]),
                                    fill='toself',
                                    fillcolor='rgba(100, 100, 250, 0.1)',
                                    line=dict(color='rgba(255,255,255,0)'),
                                    showlegend=False,
                                    hoverinfo='skip'
                                ))
                    
                        with col3:
                            log_scale = st.checkbox("–õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∞—è —à–∫–∞–ª–∞", value=False)
                            if log_scale:
                                fig.update_layout(yaxis_type="log")
                    
                        st.plotly_chart(fig, use_container_width=True)
                
                    with chart_tabs[1]:
                        # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
                        st.subheader("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑")
                    
                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
                        # RSI
                        if len(currency_history) >= 14:
                            delta = currency_history['value'].diff()
                            gain = delta.clip(lower=0)
                            loss = -delta.clip(upper=0)
                        
                            avg_gain = gain.rolling(window=14).mean()
                            avg_loss = loss.rolling(window=14).mean()
                        
                            rs = avg_gain / avg_loss
                            rsi = 100 - (100 / (1 + rs))
                        
                            col1, col2 = st.columns(2)
                        
                            with col1:
                                # –ì—Ä–∞—Ñ–∏–∫ RSI
                                fig = go.Figure()
                            
                                fig.add_trace(go.Scatter(
                                    x=currency_history['date'],
                                    y=rsi,
                                    mode='lines',
                                    name='RSI',
                                    line=dict(color='purple')
                                ))
                            
                                # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏–∏ —É—Ä–æ–≤–Ω–µ–π
                                fig.add_shape(
                                    type="line",
                                    x0=currency_history['date'].min(),
                                    y0=70,
                                    x1=currency_history['date'].max(),
                                    y1=70,
                                    line=dict(
                                        color="red",
                                        width=1,
                                        dash="dash",
                                    )
                                )
                            
                                fig.add_shape(
                                    type="line",
                                    x0=currency_history['date'].min(),
                                    y0=30,
                                    x1=currency_history['date'].max(),
                                    y1=30,
                                    line=dict(
                                        color="green",
                                        width=1,
                                        dash="dash",
                                    )
                                )
                            
                                fig.update_layout(
                                    title="–ò–Ω–¥–µ–∫—Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–ª—ã (RSI)",
                                    xaxis_title="–î–∞—Ç–∞",
                                    yaxis_title="RSI",
                                    height=300,
                                    yaxis=dict(
                                        range=[0, 100]
                                    )
                                )
                            
                                st.plotly_chart(fig, use_container_width=True)
                            
                                # –î–æ–±–∞–≤–∏–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é RSI
                                current_rsi = rsi.dropna().iloc[-1]
                                if current_rsi > 70:
                                    st.warning(f"RSI = {current_rsi:.1f} (> 70) - –≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å")
                                elif current_rsi < 30:
                                    st.warning(f"RSI = {current_rsi:.1f} (< 30) - –≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å")
                                else:
                                    st.info(f"RSI = {current_rsi:.1f} (–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞)")
                            
                            with col2:
                                # MACD
                                ema12 = currency_history['value'].ewm(span=12, adjust=False).mean()
                                ema26 = currency_history['value'].ewm(span=26, adjust=False).mean()
                                macd = ema12 - ema26
                                signal = macd.ewm(span=9, adjust=False).mean()
                                histogram = macd - signal
                            
                                fig = go.Figure()
                            
                                # MACD –ª–∏–Ω–∏—è
                                fig.add_trace(go.Scatter(
                                    x=currency_history['date'],
                                    y=macd,
                                    mode='lines',
                                    name='MACD',
                                    line=dict(color='blue')
                                ))
                            
                                # –°–∏–≥–Ω–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
                                fig.add_trace(go.Scatter(
                                    x=currency_history['date'],
                                    y=signal,
                                    mode='lines',
                                    name='–°–∏–≥–Ω–∞–ª',
                                    line=dict(color='red')
                                ))
                            
                                # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞
                                fig.add_trace(go.Bar(
                                    x=currency_history['date'],
                                    y=histogram,
                                    name='–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞',
                                    marker_color=['green' if x > 0 else 'red' for x in histogram]
                                ))
                            
                                fig.update_layout(
                                    title="MACD (—Å—Ö–æ–∂–¥–µ–Ω–∏–µ/—Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö)",
                                    xaxis_title="–î–∞—Ç–∞",
                                    yaxis_title="MACD",
                                    height=300
                                )
                            
                                st.plotly_chart(fig, use_container_width=True)
                            
                                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é MACD
                                last_macd = macd.iloc[-1]
                                last_signal = signal.iloc[-1]
                            
                                if last_macd > last_signal:
                                    st.info("MACD > –°–∏–≥–Ω–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è: –≤–æ–∑–º–æ–∂–µ–Ω –±—ã—á–∏–π —Ç—Ä–µ–Ω–¥")
                                else:
                                    st.info("MACD < –°–∏–≥–Ω–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è: –≤–æ–∑–º–æ–∂–µ–Ω –º–µ–¥–≤–µ–∂–∏–π —Ç—Ä–µ–Ω–¥")
                        else:
                            st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ (–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º 14 –¥–Ω–µ–π)")
                
                    with chart_tabs[2]:
                        # –°–µ–∑–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                        st.subheader("–°–µ–∑–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
                    
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –¥–∞–Ω–Ω—ã—Ö
                        if len(currency_history) >= 30:
                            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏ –º–µ—Å—è—Ü
                            currency_history['day_of_week'] = currency_history['date'].dt.dayofweek
                            currency_history['month'] = currency_history['date'].dt.month
                        
                            col1, col2 = st.columns(2)
                        
                            with col1:
                                # –°—Ä–µ–¥–Ω–∏–π –∫—É—Ä—Å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
                                day_avg = currency_history.groupby('day_of_week')['value'].mean().reset_index()
                                day_avg['day_name'] = day_avg['day_of_week'].map({
                                    0: '–ü–Ω', 1: '–í—Ç', 2: '–°—Ä', 3: '–ß—Ç', 4: '–ü—Ç', 5: '–°–±', 6: '–í—Å'
                                })
                            
                                fig = px.bar(
                                    day_avg,
                                    x='day_name',
                                    y='value',
                                    title="–°—Ä–µ–¥–Ω–∏–π –∫—É—Ä—Å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏",
                                    color='value',
                                    color_continuous_scale='Viridis'
                                )
                            
                                fig.update_layout(
                                    xaxis_title="–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏",
                                    yaxis_title="–°—Ä–µ–¥–Ω–∏–π –∫—É—Ä—Å",
                                    height=300
                                )
                            
                                st.plotly_chart(fig, use_container_width=True)
                        
                            with col2:
                                # –°—Ä–µ–¥–Ω–∏–π –∫—É—Ä—Å –ø–æ –º–µ—Å—è—Ü–∞–º
                                month_avg = currency_history.groupby('month')['value'].mean().reset_index()
                                month_avg['month_name'] = month_avg['month'].map({
                                    1: '–Ø–Ω–≤', 2: '–§–µ–≤', 3: '–ú–∞—Ä', 4: '–ê–ø—Ä', 5: '–ú–∞–π', 6: '–ò—é–Ω',
                                    7: '–ò—é–ª', 8: '–ê–≤–≥', 9: '–°–µ–Ω', 10: '–û–∫—Ç', 11: '–ù–æ—è', 12: '–î–µ–∫'
                                })
                            
                                fig = px.bar(
                                    month_avg,
                                    x='month_name',
                                    y='value',
                                    title="–°—Ä–µ–¥–Ω–∏–π –∫—É—Ä—Å –ø–æ –º–µ—Å—è—Ü–∞–º",
                                    color='value',
                                    color_continuous_scale='Viridis'
                                )
                            
                                fig.update_layout(
                                    xaxis_title="–ú–µ—Å—è—Ü",
                                    yaxis_title="–°—Ä–µ–¥–Ω–∏–π –∫—É—Ä—Å",
                                    height=300
                                )
                            
                                st.plotly_chart(fig, use_container_width=True)
                        else:
                            st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–µ–∑–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ (–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º 30 –¥–Ω–µ–π)")
                
                    with chart_tabs[3]:
                        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                        st.subheader("–ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
                    
                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–Ω–µ–≤–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                        currency_history['pct_change'] = currency_history['value'].pct_change() * 100
                    
                        # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                        fig = px.histogram(
                            currency_history.dropna(),
                            x='pct_change',
                            nbins=20,
                            title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π",
                            color_discrete_sequence=['blue']
                        )
                    
                        # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∏–≤—É—é –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
                        mean = currency_history['pct_change'].mean()
                        std = currency_history['pct_change'].std()
                    
                        x = np.linspace(mean - 3*std, mean + 3*std, 100)
                        y = stats_norm.pdf(x, mean, std) * len(currency_history) * (currency_history['pct_change'].max() - currency_history['pct_change'].min()) / 20
                    
                        fig.add_trace(go.Scatter(
                            x=x,
                            y=y,
                            mode='lines',
                            name='–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ',
                            line=dict(color='red')
                        ))
                    
                        fig.update_layout(
                        xaxis_title="–ò–∑–º–µ–Ω–µ–Ω–∏–µ, %",
                        yaxis_title="–ß–∞—Å—Ç–æ—Ç–∞",
                        height=400
                    )
                    
                    st.plotly_chart(fig, use_container_width=True)
                    
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–Ω–µ–π —Ä–æ—Å—Ç–∞/–ø–∞–¥–µ–Ω–∏—è
                        daily_changes = currency_history['pct_change'].dropna()
                        
                        up_days = sum(daily_changes > 0)
                        down_days = sum(daily_changes < 0)
                        flat_days = sum(daily_changes == 0)
                        
                        # –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É –¥–Ω–µ–π —Ä–æ—Å—Ç–∞/–ø–∞–¥–µ–Ω–∏—è
                        fig = px.pie(
                            values=[up_days, down_days, flat_days],
                            names=['–†–æ—Å—Ç', '–ü–∞–¥–µ–Ω–∏–µ', '–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π'],
                            title="–î–Ω–∏ —Ä–æ—Å—Ç–∞ –∏ –ø–∞–¥–µ–Ω–∏—è",
                            color_discrete_sequence=['green', 'red', 'gray']
                        )
                        
                        fig.update_layout(height=300)
                        st.plotly_chart(fig, use_container_width=True)
                    
                    with col2:
                        # –¢–∞–±–ª–∏—Ü–∞ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
                        st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
                        
                        avg_up = daily_changes[daily_changes > 0].mean() if any(daily_changes > 0) else 0
                        avg_down = daily_changes[daily_changes < 0].mean() if any(daily_changes < 0) else 0
                        max_up = daily_changes.max()
                        max_down = daily_changes.min()
                        
                        stats_df = pd.DataFrame([
                            {"–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å": "–°—Ä–µ–¥–Ω–∏–π —Ä–æ—Å—Ç", "–ó–Ω–∞—á–µ–Ω–∏–µ": f"+{avg_up:.2f}%"},
                            {"–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å": "–°—Ä–µ–¥–Ω–µ–µ –ø–∞–¥–µ–Ω–∏–µ", "–ó–Ω–∞—á–µ–Ω–∏–µ": f"{avg_down:.2f}%"},
                            {"–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç", "–ó–Ω–∞—á–µ–Ω–∏–µ": f"+{max_up:.2f}%"},
                            {"–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ", "–ó–Ω–∞—á–µ–Ω–∏–µ": f"{max_down:.2f}%"},
                            {"–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ", "–ó–Ω–∞—á–µ–Ω–∏–µ": f"{std:.2f}%"},
                            {"–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å": "–î–Ω–µ–π —Ä–æ—Å—Ç–∞", "–ó–Ω–∞—á–µ–Ω–∏–µ": f"{up_days} ({up_days/len(daily_changes)*100:.1f}%)"},
                            {"–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å": "–î–Ω–µ–π –ø–∞–¥–µ–Ω–∏—è", "–ó–Ω–∞—á–µ–Ω–∏–µ": f"{down_days} ({down_days/len(daily_changes)*100:.1f}%)"}
                        ])
                        
                        st.dataframe(stats_df, use_container_width=True, hide_index=True)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
                st.markdown("---")
                
                col1, col2 = st.columns(2)
                
                with col1:
                    st.subheader("–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
                    
                    # –û–ø—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
                    export_format = st.selectbox(
                        "–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞",
                        options=["CSV", "Excel", "JSON"],
                        index=0
                    )
                    
                    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
                    if st.button("üì• –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"):
                        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
                        export_df = currency_history.copy()
                        export_df['date'] = export_df['date'].dt.strftime('%Y-%m-%d')
                        
                        if export_format == "CSV":
                            csv = export_df.to_csv(index=False)
                            b64 = base64.b64encode(csv.encode()).decode()
                            href = f'<a href="data:file/csv;base64,{b64}" download="{selected_code}_history.csv">–°–∫–∞—á–∞—Ç—å CSV-—Ñ–∞–π–ª</a>'
                            st.markdown(href, unsafe_allow_html=True)
                        elif export_format == "Excel":
                            output = BytesIO()
                            with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                                export_df.to_excel(writer, sheet_name='Data', index=False)
                            b64 = base64.b64encode(output.getvalue()).decode()
                            href = f'<a href="data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,{b64}" download="{selected_code}_history.xlsx">–°–∫–∞—á–∞—Ç—å Excel-—Ñ–∞–π–ª</a>'
                            st.markdown(href, unsafe_allow_html=True)
                        elif export_format == "JSON":
                            json_data = export_df.to_json(orient='records')
                            b64 = base64.b64encode(json_data.encode()).decode()
                            href = f'<a href="data:file/json;base64,{b64}" download="{selected_code}_history.json">–°–∫–∞—á–∞—Ç—å JSON-—Ñ–∞–π–ª</a>'
                            st.markdown(href, unsafe_allow_html=True)
                
                with col2:
                    # –ë—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–æ–≥–Ω–æ–∑—É
                    st.subheader("–ü—Ä–æ–≥–Ω–æ–∑ –∫—É—Ä—Å–∞")
                    st.info(f"–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å, –∫–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—Å—è –∫—É—Ä—Å {selected_code} –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è?")
                    
                    predict_days = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞", 1, 30, 7, key="quick_predict_days")
                    
                    if st.button("üîÆ –°–¥–µ–ª–∞—Ç—å –±—ã—Å—Ç—Ä—ã–π –ø—Ä–æ–≥–Ω–æ–∑", key="quick_predict"):
                        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≤–∫–ª–∞–¥–∫—É –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
                        st.session_state.quick_predict_currency = selected_code
                        st.session_state.quick_predict_days = predict_days
                        st.session_state.active_tab = "–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ"
                        st.experimental_rerun()
            else:
                st.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {selected_code}")
        else:
            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞–ª—é—Ç–∞—Ö. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å.")
    
    # –í–ö–õ–ê–î–ö–ê 3: –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç
    with tab3:
        st.header("–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç")
    
        currencies = get_currencies()
        currency_options = {curr["code"]: curr["name"] for curr in currencies} if currencies else {}
    
        if currency_options:
            # –û—Å–Ω–æ–≤–Ω–∞—è —Å–µ–∫—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
            st.subheader("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑")
        
            # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–∫–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–≥–Ω–æ–∑–∞—Ö
            info_col, predict_col = st.columns([1, 3])
        
            with info_col:
                st.markdown("""
                ### –û –ø—Ä–æ–≥–Ω–æ–∑–∞—Ö
            
                –ù–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç **–ø–µ—Ä–µ–¥–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è** –∏ –∞–Ω–∞–ª–∏–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç.
            
                **–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
                1. –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
                2. –í—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à—É—é –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
                3. –§–æ—Ä–º–∏—Ä—É–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
            
                **–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞** –∑–∞–≤–∏—Å–∏—Ç –æ—Ç:
                - –û–±—ä–µ–º–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                - –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –≤–∞–ª—é—Ç—ã
                - –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞
            
                > üìä –ß–µ–º –∫–æ—Ä–æ—á–µ –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞, —Ç–µ–º –æ–Ω —Ç–æ—á–Ω–µ–µ
                """)
        
            with predict_col:
                # –í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                col1, col2, col3 = st.columns([3, 1, 1])
            
                with col1:
                    selected_code = st.selectbox(
                        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞",
                        options=list(currency_options.keys()),
                        format_func=lambda x: f"{x} - {currency_options[x]}",
                        key="predict_currency"
                    )
            
                with col2:
                    days_to_predict = st.slider("–î–Ω–µ–π –ø—Ä–æ–≥–Ω–æ–∑–∞", 1, 30, 7)
            
                with col3:
                    predict_button = st.button("üîÆ –°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑", type="primary")
            
                if predict_button:
                    with st.spinner('–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞...'):
                        prediction_result = predict_currency(selected_code, days_to_predict)
                    
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –≤ –∏—Å—Ç–æ—Ä–∏–∏
                        if 'prediction_history' not in st.session_state:
                            st.session_state.prediction_history = []
                    
                        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –≤ –∏—Å—Ç–æ—Ä–∏—é
                        if prediction_result:
                            st.session_state.prediction_history.append({
                                'timestamp': datetime.now(),
                                'currency': selected_code,
                                'days': days_to_predict,
                                'result': prediction_result
                            })
                    
                        if prediction_result:
                            history = get_currency_history(selected_code, 30)
                        
                            # –°–æ–∑–¥–∞–µ–º DataFrame —Å –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏
                            predictions = pd.DataFrame([
                                {"date": pd.to_datetime(p["date"]), "predicted_value": p["predicted_value"]}
                                for p in prediction_result["predictions"]
                            ])
                        
                            # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞
                            st.subheader("–ü—Ä–æ–≥–Ω–æ–∑ –∫—É—Ä—Å–∞")
                        
                            # –í–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π
                            viz_tabs = st.tabs(["–ì—Ä–∞—Ñ–∏–∫", "–¢–∞–±–ª–∏—Ü–∞", "–ú–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª–∏"])
                        
                            with viz_tabs[0]:
                                # –£–ª—É—á—à–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
                                fig = go.Figure()
                            
                                # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
                                fig.add_trace(go.Scatter(
                                    x=history['date'],
                                    y=history['value'],
                                    mode='lines',
                                    name='–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ',
                                    line=dict(color='blue', width=2)
                                ))
                            
                                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑
                                fig.add_trace(go.Scatter(
                                    x=predictions['date'],
                                    y=predictions['predicted_value'],
                                    mode='lines+markers',
                                    name='–ü—Ä–æ–≥–Ω–æ–∑',
                                    line=dict(color='green', dash='dash', width=2),
                                    marker=dict(size=8, symbol='circle', color='green')
                                ))
                            
                                # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏
                                # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º 5% –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –¥–ª—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏
                                upper_bound = predictions['predicted_value'] * 1.05
                                lower_bound = predictions['predicted_value'] * 0.95
                            
                                # –ó–∞–ª–∏–≤–∫–∞ –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏
                                fig.add_trace(go.Scatter(
                                    x=predictions['date'].tolist() + predictions['date'].tolist()[::-1],
                                    y=upper_bound.tolist() + lower_bound.tolist()[::-1],
                                    fill='toself',
                                    fillcolor='rgba(0,176,0,0.2)',
                                    line=dict(color='rgba(255,255,255,0)'),
                                    hoverinfo="skip",
                                    showlegend=False
                                ))
                            
                                # –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                                if not history.empty:
                                    current_value = history['value'].iloc[-1]
                                    fig.add_hline(y=current_value, line_dash="dot", 
                                                  line_color="red", annotation_text="–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å")
                            
                                # –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                                fig.update_layout(
                                    title=f"–ü—Ä–æ–≥–Ω–æ–∑ –∫—É—Ä—Å–∞ {selected_code} –Ω–∞ {days_to_predict} –¥–Ω–µ–π",
                                    xaxis_title="–î–∞—Ç–∞",
                                    yaxis_title="–ö—É—Ä—Å –∫ —Ä—É–±–ª—é",
                                    height=500,
                                    hovermode="x unified",
                                    legend=dict(
                                        orientation="h",
                                        yanchor="bottom",
                                        y=1.02,
                                        xanchor="center",
                                        x=0.5
                                    ),
                                    margin=dict(l=20, r=20, t=40, b=20)
                                )
                            
                                st.plotly_chart(fig, use_container_width=True)
                            
                                # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é
                                st.caption("–ó–µ–ª–µ–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –∫–æ–ª–µ–±–∞–Ω–∏–π –∫—É—Ä—Å–∞")
                        
                            with viz_tabs[1]:
                                # –¢–∞–±–ª–∏—Ü–∞ —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º
                                st.subheader("–î–µ—Ç–∞–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞")
                            
                                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                                current_value = history['value'].iloc[-1] if not history.empty else None
                            
                                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                                df_display = pd.DataFrame([
                                    {
                                        "–î–∞—Ç–∞": pd.to_datetime(p["date"]).strftime("%d.%m.%Y"),
                                        "–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏": pd.to_datetime(p["date"]).strftime("%a"),
                                        "–ü—Ä–æ–≥–Ω–æ–∑ –∫—É—Ä—Å–∞": f"{p['predicted_value']:.4f} ‚ÇΩ",
                                        "–ò–∑–º–µ–Ω–µ–Ω–∏–µ": f"{p['change_percent']:+.2f}%",
                                        "–ò–∑–º–µ–Ω–µ–Ω–∏–µ (–∞–±—Å.)": f"{(p['predicted_value'] - current_value):+.4f} ‚ÇΩ" if current_value else "N/A"
                                    }
                                    for p in prediction_result["predictions"]
                                ])
                            
                                # –°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
                                st.dataframe(
                                    df_display,
                                    use_container_width=True,
                                    hide_index=True,
                                    column_config={
                                        "–ò–∑–º–µ–Ω–µ–Ω–∏–µ": st.column_config.ProgressColumn(
                                            "–ò–∑–º–µ–Ω–µ–Ω–∏–µ",
                                            format="%+.2f%%",
                                            min_value=-5,
                                            max_value=5,
                                        )
                                    }
                                )
                        
                            with viz_tabs[2]:
                                # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏
                                st.subheader("–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏")
                            
                                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª–∏, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—Ç API
                                if "model_metrics" in prediction_result:
                                    metrics = prediction_result["model_metrics"]
                                    model_type = prediction_result.get("model_type", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å")
                                
                                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏
                                    r2_value = metrics.get('r2', 0)
                                    quality_class, quality_text = evaluate_model_quality(r2_value)
                                
                                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–æ–¥–µ–ª–∏
                                    st.markdown(f"""
                                    <div style="background-color:#f8f9fa; padding:15px; border-radius:10px; margin-bottom:15px">
                                        <h4>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏</h4>
                                        <p><b>–¢–∏–ø –º–æ–¥–µ–ª–∏:</b> {model_type}</p>
                                        <p><b>–í–µ—Ä—Å–∏—è:</b> {prediction_result['model_version']}</p>
                                        <p><b>–ö–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏:</b> <span style="background-color:{
                                        '#d1fae5' if quality_class == 'good' else '#fef3c7' if quality_class == 'medium' else '#fee2e2'
                                        }; padding:3px 8px; border-radius:5px;">{quality_text}</span></p>
                                    </div>
                                    """, unsafe_allow_html=True)
                                
                                    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫
                                    col1, col2 = st.columns(2)
                                
                                    with col1:
                                        # –î–∏–∞–≥—Ä–∞–º–º–∞ R¬≤
                                        r2_chart = {
                                            'values': [r2_value, 1 - r2_value],
                                            'colors': ['#10b981', '#e5e7eb'],
                                            'title': 'R¬≤ (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∞—Ü–∏–∏)',
                                            'value': f"{r2_value:.4f}"
                                        }
                                    
                                        fig = go.Figure(go.Pie(
                                            values=r2_chart['values'],
                                            hole=0.7,
                                            marker_colors=r2_chart['colors'],
                                            showlegend=False,
                                            textinfo='none'
                                        ))
                                    
                                        fig.update_layout(
                                            title=r2_chart['title'],
                                            annotations=[dict(
                                                text=r2_chart['value'],
                                                x=0.5, y=0.5,
                                                font_size=20,
                                                showarrow=False
                                            )],
                                            height=250,
                                            margin=dict(t=30, b=0, l=0, r=0)
                                        )
                                    
                                        st.plotly_chart(fig, use_container_width=True)
                                
                                    with col2:
                                        # –†–∞–¥–∏–∞–ª—å–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
                                        other_metrics = {
                                            'RMSE': metrics.get('rmse', 0),
                                            'MAE': metrics.get('mae', 0),
                                            'MAPE (%)': min(metrics.get('mape', 0), 100)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
                                        }
                                    
                                        # –°–æ–∑–¥–∞–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
                                        values = list(other_metrics.values())
                                        max_value = max(values)
                                        norm_values = [v / max_value for v in values]
                                    
                                        fig = go.Figure()
                                    
                                        fig.add_trace(go.Scatterpolar(
                                            r=norm_values,
                                            theta=list(other_metrics.keys()),
                                            fill='toself',
                                            fillcolor='rgba(16, 185, 129, 0.2)',
                                            line=dict(color='#10b981')
                                        ))
                                    
                                        fig.update_layout(
                                            title="–î—Ä—É–≥–∏–µ –º–µ—Ç—Ä–∏–∫–∏ (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)",
                                            polar=dict(
                                                radialaxis=dict(
                                                    visible=True,
                                                    range=[0, 1]
                                                )
                                            ),
                                            showlegend=False,
                                            height=250,
                                            margin=dict(t=30, b=0, l=0, r=0)
                                        )
                                    
                                        st.plotly_chart(fig, use_container_width=True)
                                
                                    # –¢–∞–±–ª–∏—Ü–∞ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
                                    st.markdown("""
                                    <table style="width: 100%; border-collapse: collapse; margin: 20px 0;">
                                        <tr style="background-color: #f8f9fa;">
                                            <th style="text-align: left; padding: 12px; border-bottom: 1px solid #e5e7eb;">–ú–µ—Ç—Ä–∏–∫–∞</th>
                                            <th style="text-align: center; padding: 12px; border-bottom: 1px solid #e5e7eb;">–ó–Ω–∞—á–µ–Ω–∏–µ</th>
                                            <th style="text-align: left; padding: 12px; border-bottom: 1px solid #e5e7eb;">–û–ø–∏—Å–∞–Ω–∏–µ</th>
                                        </tr>
                                        <tr>
                                            <td style="padding: 12px; border-bottom: 1px solid #e5e7eb;">R¬≤ (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∞—Ü–∏–∏)</td>
                                            <td style="text-align: center; padding: 12px; border-bottom: 1px solid #e5e7eb;">{:.4f}</td>
                                            <td style="padding: 12px; border-bottom: 1px solid #e5e7eb;">–î–æ–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–Ω–æ–π –¥–∏—Å–ø–µ—Ä—Å–∏–∏ (0-1, —á–µ–º –±–ª–∏–∂–µ –∫ 1, —Ç–µ–º –ª—É—á—à–µ)</td>
                                        </tr>
                                        <tr>
                                            <td style="padding: 12px; border-bottom: 1px solid #e5e7eb;">MAE (—Å—Ä–µ–¥–Ω—è—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –æ—à–∏–±–∫–∞)</td>
                                            <td style="text-align: center; padding: 12px; border-bottom: 1px solid #e5e7eb;">{:.4f}</td>
                                            <td style="padding: 12px; border-bottom: 1px solid #e5e7eb;">–°—Ä–µ–¥–Ω–µ–µ –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –æ—à–∏–±–æ–∫ (—á–µ–º –º–µ–Ω—å—à–µ, —Ç–µ–º –ª—É—á—à–µ)</td>
                                        </tr>
                                        <tr>
                                            <td style="padding: 12px; border-bottom: 1px solid #e5e7eb;">RMSE (–∫–æ—Ä–µ–Ω—å –∏–∑ —Å—Ä–µ–¥–Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ–π –æ—à–∏–±–∫–∏)</td>
                                            <td style="text-align: center; padding: 12px; border-bottom: 1px solid #e5e7eb;">{:.4f}</td>
                                            <td style="padding: 12px; border-bottom: 1px solid #e5e7eb;">–ú–µ—Ä–∞ —Ç–∏–ø–∏—á–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –æ—à–∏–±–∫–∏ (—á–µ–º –º–µ–Ω—å—à–µ, —Ç–µ–º –ª—É—á—à–µ)</td>
                                        </tr>
                                        <tr>
                                            <td style="padding: 12px; border-bottom: 1px solid #e5e7eb;">MAPE (—Å—Ä–µ–¥–Ω—è—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è –æ—à–∏–±–∫–∞)</td>
                                            <td style="text-align: center; padding: 12px; border-bottom: 1px solid #e5e7eb;">{:.2f}%</td>
                                            <td style="padding: 12px; border-bottom: 1px solid #e5e7eb;">–°—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (—á–µ–º –º–µ–Ω—å—à–µ, —Ç–µ–º –ª—É—á—à–µ)</td>
                                        </tr>
                                    </table>
                                    """.format(
                                        metrics.get('r2', 0),
                                        metrics.get('mae', 0),
                                        metrics.get('rmse', 0),
                                        metrics.get('mape', 0)
                                    ), unsafe_allow_html=True)
                                else:
                                    st.warning("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Ç—Ä–∏–∫–∞—Ö –º–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                        else:
                            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑")
        
            # –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
            if 'prediction_history' in st.session_state and st.session_state.prediction_history:
                st.markdown("---")
                st.subheader("–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤")
            
                # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –∏—Å—Ç–æ—Ä–∏–µ–π
                history_items = []
                for idx, pred in enumerate(st.session_state.prediction_history[::-1]):  # –û–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –¥–ª—è –Ω–æ–≤—ã—Ö —Å–≤–µ—Ä—Ö—É
                    timestamp = pred['timestamp'].strftime("%d.%m.%Y %H:%M")
                    currency = pred['currency']
                    days = pred['days']
                
                    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–µ –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –ø—Ä–æ–≥–Ω–æ–∑–∞
                    if 'result' in pred and 'predictions' in pred['result'] and pred['result']['predictions']:
                        predictions = pred['result']['predictions']
                        first_value = predictions[0]['predicted_value']
                        last_value = predictions[-1]['predicted_value']
                        change = ((last_value / first_value) - 1) * 100
                        change_text = f"{change:+.2f}%"
                    else:
                        first_value = "N/A"
                        last_value = "N/A"
                        change_text = "N/A"
                
                    history_items.append({
                        "‚Ññ": idx + 1,
                        "–î–∞—Ç–∞": timestamp,
                        "–í–∞–ª—é—Ç–∞": currency,
                        "–ü–µ—Ä–∏–æ–¥": f"{days} –¥–Ω–µ–π",
                        "–ò–∑–º–µ–Ω–µ–Ω–∏–µ": change_text,
                        "–î–µ–π—Å—Ç–≤–∏—è": "–ü—Ä–æ—Å–º–æ—Ç—Ä"
                    })
            
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                if history_items:
                    df_history = pd.DataFrame(history_items)
                
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç —Å –≤—ã–±–æ—Ä–æ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π
                    selected_rows = st.dataframe(
                        df_history,
                        use_container_width=True,
                        hide_index=True,
                        selection="single"
                    )
                
                    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞
                    if selected_rows:
                        selected_idx = list(selected_rows)[0]
                        if 0 <= selected_idx < len(st.session_state.prediction_history):
                            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑
                            selected_pred = st.session_state.prediction_history[-(selected_idx+1)]  # –û–±—Ä–∞—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å
                        
                            st.subheader(f"–î–µ—Ç–∞–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –æ—Ç {selected_pred['timestamp'].strftime('%d.%m.%Y %H:%M')}")
                        
                            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑–∞
                            if 'result' in selected_pred and 'predictions' in selected_pred['result']:
                                # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
                                pred_df = pd.DataFrame([
                                    {"date": pd.to_datetime(p["date"]), "predicted_value": p["predicted_value"]}
                                    for p in selected_pred['result']["predictions"]
                                ])
                            
                                fig = go.Figure()
                            
                                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑
                                fig.add_trace(go.Scatter(
                                    x=pred_df['date'],
                                    y=pred_df['predicted_value'],
                                    mode='lines+markers',
                                    name='–ü—Ä–æ–≥–Ω–æ–∑',
                                    line=dict(color='green', width=2),
                                    marker=dict(size=8, symbol='circle', color='green')
                                ))
                            
                                fig.update_layout(
                                    title=f"–ü—Ä–æ–≥–Ω–æ–∑ –∫—É—Ä—Å–∞ {selected_pred['currency']} –Ω–∞ {selected_pred['days']} –¥–Ω–µ–π",
                                    xaxis_title="–î–∞—Ç–∞",
                                    yaxis_title="–ö—É—Ä—Å –∫ —Ä—É–±–ª—é",
                                    height=300,
                                    hovermode="x unified"
                                )
                            
                                st.plotly_chart(fig, use_container_width=True)
                            
                                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –¥–∞–Ω–Ω—ã–º–∏
                                st.dataframe(
                                    pd.DataFrame([
                                        {
                                            "–î–∞—Ç–∞": pd.to_datetime(p["date"]).strftime("%d.%m.%Y"),
                                            "–ü—Ä–æ–≥–Ω–æ–∑ –∫—É—Ä—Å–∞": f"{p['predicted_value']:.4f} ‚ÇΩ",
                                            "–ò–∑–º–µ–Ω–µ–Ω–∏–µ": f"{p['change_percent']:+.2f}%"
                                        }
                                        for p in selected_pred['result']["predictions"]
                                    ]),
                                    use_container_width=True,
                                    hide_index=True
                                )
        
                    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
                    if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–≥–Ω–æ–∑–æ–≤", key="clear_history"):
                        st.session_state.prediction_history = []
                        st.experimental_rerun()
        else:
            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞–ª—é—Ç–∞—Ö. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å.")
    
    # –í–ö–õ–ê–î–ö–ê 4: –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã
    with tab4:
        st.header("–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã")
    
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
        st.info("""
        üìå **–î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –ø–æ–≥–æ–¥—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:**
        - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –∫—Ä—É–ø–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
        - –í—ã–±–∏—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥ –Ω–µ –±–æ–ª–µ–µ 30 –¥–Ω–µ–π –¥–ª—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        - –í–∫–ª—é—á–∞—Ç—å ML-–ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        """)
    
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤
        popular_cities = get_popular_cities()
        city_names = [city["name"] for city in popular_cities]
    
        # –°–æ–∑–¥–∞–µ–º –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏: –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        city_col, params_col = st.columns([3, 2])
    
        with city_col:
            # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
            city_tabs = st.tabs(["–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≥–æ—Ä–æ–¥–∞", "–ü–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–∞", "–ö–∞—Ä—Ç–∞"])
        
            with city_tabs[0]:
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≥–æ—Ä–æ–¥–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
                countries = {}
                for city in popular_cities:
                    country = city["country"]
                    if country not in countries:
                        countries[country] = []
                    countries[country].append(city["name"])
            
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω—ã
                selected_country = st.radio(
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:",
                    options=list(countries.keys()),
                    format_func=lambda c: {
                        "RU": "–†–æ—Å—Å–∏—è üá∑üá∫", 
                        "US": "–°–®–ê üá∫üá∏", 
                        "GB": "–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è üá¨üáß",
                        "FR": "–§—Ä–∞–Ω—Ü–∏—è üá´üá∑",
                        "DE": "–ì–µ—Ä–º–∞–Ω–∏—è üá©üá™",
                        "IT": "–ò—Ç–∞–ª–∏—è üáÆüáπ",
                        "JP": "–Ø–ø–æ–Ω–∏—è üáØüáµ",
                        "CN": "–ö–∏—Ç–∞–π üá®üá≥",
                        "AU": "–ê–≤—Å—Ç—Ä–∞–ª–∏—è üá¶üá∫",
                        "AE": "–û–ê–≠ üá¶üá™",
                        "TR": "–¢—É—Ä—Ü–∏—è üáπüá∑"
                    }.get(c, c),
                    horizontal=True
                )
            
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–æ—Ä–æ–¥–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã
                country_cities = countries.get(selected_country, [])
                cols = st.columns(2)
                city_buttons = []
            
                for i, city_name in enumerate(country_cities):
                    col_idx = i % 2
                    with cols[col_idx]:
                        city_btn = st.button(city_name, key=f"city_btn_{city_name}", use_container_width=True)
                        city_buttons.append((city_name, city_btn))
            
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –≤—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥
                selected_city = None
                for city_name, clicked in city_buttons:
                    if clicked:
                        selected_city = city_name
                        break
        
            with city_tabs[1]:
                # –ü–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–∞
                search_city = st.text_input("üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, –ü–∞—Ä–∏–∂, –ù—å—é-–ô–æ—Ä–∫")
                search_button = st.button("–ù–∞–π—Ç–∏", key="search_city_btn")
            
                if search_button and search_city:
                    selected_city = search_city
        
            with city_tabs[2]:
                # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –¥–ª—è –Ω–∞—Å—Ç–æ—è—â–µ–π –∫–∞—Ä—Ç—ã –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∫–∞—Ä—Ç–∞–º–∏
                st.info("–§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –Ω–∞ –∫–∞—Ä—Ç–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
                st.image("https://via.placeholder.com/500x300.png?text=Interactive+Map+Coming+Soon", use_column_width=True)
            
                map_city_btn = st.button("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –Ω–∞ –∫–∞—Ä—Ç–µ –≥–æ—Ä–æ–¥")
                if map_city_btn:
                    selected_city = "–ú–æ—Å–∫–≤–∞"  # Placeholder, –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≥–æ—Ä–æ–¥ —Å –∫–∞—Ä—Ç—ã
    
        with params_col:
            st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–≥–Ω–æ–∑–∞")
        
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
            days_history = st.slider(
                "–î–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
                min_value=7,
                max_value=60,
                value=30
            )
        
            # –û–ø—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
            predict = st.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ML-–ø—Ä–æ–≥–Ω–æ–∑", value=True)
        
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –≤—ã–≤–æ–¥–∞
            show_historical = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ", value=True)
            show_details = st.checkbox("–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", value=False)
    
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        city = selected_city if selected_city else ""
    
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã
        get_weather_btn = st.button("üå§Ô∏è –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã", type="primary", use_container_width=True)
    
        if city and get_weather_btn:
            with st.spinner(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –¥–ª—è {city}..."):
                weather_data = get_weather(city, days_history, predict)
        
            if weather_data:
                # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Å —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥–æ–π
                current = weather_data['current']
                current_date = datetime.now().strftime("%d.%m.%Y %H:%M")
            
                # –ö–∞—Ä—Ç–æ—á–∫–∞ —Å —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥–æ–π
                st.markdown(f"""
                <div style="background-color: #f8f9fa; border-radius: 10px; padding: 20px; margin-bottom: 20px;">
                    <div style="display: flex; justify-content: space-between; align-items: center;">
                        <div>
                            <h2 style="margin: 0;">{weather_data['city']}</h2>
                            <p style="color: #6c757d; margin-top: 5px;">{current_date}</p>
                        </div>
                        <div style="text-align: center;">
                            <img src="http://openweathermap.org/img/wn/{current['icon']}@2x.png" alt="{current['description']}" style="width: 100px;">
                            <p style="margin: 0;">{current['description'].capitalize()}</p>
                        </div>
                        <div style="text-align: right;">
                            <span style="font-size: 3rem; font-weight: bold;">{current['temperature']:.1f}¬∞C</span>
                            <p style="margin: 0;">–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {current['feels_like']:.1f}¬∞C</p>
                        </div>
                    </div>
                </div>
                """, unsafe_allow_html=True)
            
                # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                col1, col2, col3 = st.columns(3)
            
                with col1:
                    st.metric("–í–ª–∞–∂–Ω–æ—Å—Ç—å", f"{current['humidity']}%")
            
                with col2:
                    st.metric("–î–∞–≤–ª–µ–Ω–∏–µ", f"{current['pressure']} –≥–ü–∞")
            
                with col3:
                    st.metric("–í–µ—Ç–µ—Ä", f"{current['wind_speed']} –º/—Å")
            
                # –í–∫–ª–∞–¥–∫–∏ —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º
                forecast_tabs = st.tabs(["–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é", "–ü–æ—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑", "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤", "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ"])
            
                with forecast_tabs[0]:
                    # –ù–µ–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –≤ –≤–∏–¥–µ –∫–∞—Ä—Ç–æ—á–µ–∫
                    st.subheader("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π")
                
                    # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –¥–Ω–µ–π
                    day_cols = st.columns(min(5, len(weather_data['forecast'])))
                
                    for i, day in enumerate(weather_data['forecast'][:5]):
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É
                        date_obj = datetime.strptime(day['date'], "%Y-%m-%d")
                        date_formatted = date_obj.strftime("%d.%m")
                        day_of_week = translate_day_of_week(date_obj.strftime("%A"))
                    
                        with day_cols[i]:
                            st.markdown(f"""
                            <div style="background-color: white; border-radius: 10px; padding: 10px; text-align: center; box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
                                <p style="font-weight: bold; margin-bottom: 5px;">{day_of_week}, {date_formatted}</p>
                                <img src="http://openweathermap.org/img/wn/{day['icon']}@2x.png" alt="{day['description']}" style="width: 50px;">
                                <p style="font-size: 1.5rem; font-weight: bold; margin: 0;">{day['temperature']:.1f}¬∞C</p>
                                <p style="font-size: 0.8rem; color: #6c757d; margin-top: 0;">–û—â—É—â–∞–µ—Ç—Å—è: {day['feels_like']:.1f}¬∞C</p>
                                <p style="margin-bottom: 0;">{day['description'].capitalize()}</p>
                            </div>
                            """, unsafe_allow_html=True)
                
                    # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
                    st.subheader("–ì—Ä–∞—Ñ–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã")
                
                    # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
                    df_forecast = pd.DataFrame([
                        {
                            "–î–∞—Ç–∞": day['date'],
                            "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞": day['temperature'],
                            "–ò—Å—Ç–æ—á–Ω–∏–∫": "OpenWeatherMap"
                        }
                        for day in weather_data['forecast']
                    ])
                
                    # –î–æ–±–∞–≤–ª—è–µ–º ML –ø—Ä–æ–≥–Ω–æ–∑
                    if 'predictions' in weather_data and weather_data['predictions']:
                        for pred in weather_data['predictions']:
                            df_forecast = pd.concat([df_forecast, pd.DataFrame([{
                                "–î–∞—Ç–∞": pred['date'],
                                "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞": pred['predicted_temperature'],
                                "–ò—Å—Ç–æ—á–Ω–∏–∫": "ML-–º–æ–¥–µ–ª—å"
                            }])], ignore_index=True)
                
                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
                    df_forecast['–î–∞—Ç–∞'] = pd.to_datetime(df_forecast['–î–∞—Ç–∞'])
                    df_forecast = df_forecast.sort_values('–î–∞—Ç–∞')
                
                    # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
                    df_forecast['–î–∞—Ç–∞_—Ñ–æ—Ä–º–∞—Ç'] = df_forecast['–î–∞—Ç–∞'].dt.strftime("%d.%m")
                
                    # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫
                    fig = px.line(
                        df_forecast, 
                        x="–î–∞—Ç–∞_—Ñ–æ—Ä–º–∞—Ç", 
                        y="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", 
                        color="–ò—Å—Ç–æ—á–Ω–∏–∫",
                        markers=True,
                        title="–ü—Ä–æ–≥–Ω–æ–∑ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã"
                    )
                
                    fig.update_layout(
                        xaxis_title="–î–∞—Ç–∞",
                        yaxis_title="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, ¬∞C",
                        height=350,
                        hovermode="x unified"
                    )
                
                    st.plotly_chart(fig, use_container_width=True)
            
                with forecast_tabs[1]:
                    st.info("–ü–æ—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
                
                    # –ó–¥–µ—Å—å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑,
                    # –µ—Å–ª–∏ API –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            
                with forecast_tabs[2]:
                    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ OpenWeatherMap –∏ ML-–º–æ–¥–µ–ª–∏
                    if 'predictions' in weather_data and weather_data['predictions']:
                        st.subheader("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤")
                    
                        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                        compare_data = {}
                    
                        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã –∏–∑ API
                        for day in weather_data['forecast']:
                            date = day['date']
                            compare_data[date] = {"OpenWeatherMap": day['temperature']}
                    
                        # –î–æ–±–∞–≤–ª—è–µ–º ML –ø—Ä–æ–≥–Ω–æ–∑—ã
                        for pred in weather_data['predictions']:
                            date = pred['date']
                            if date in compare_data:
                                compare_data[date]["ML-–º–æ–¥–µ–ª—å"] = pred['predicted_temperature']
                            else:
                                compare_data[date] = {"ML-–º–æ–¥–µ–ª—å": pred['predicted_temperature']}
                    
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame
                        comparison_rows = []
                        for date, values in compare_data.items():
                            row = {"–î–∞—Ç–∞": date}
                            row.update(values)
                            if "OpenWeatherMap" in values and "ML-–º–æ–¥–µ–ª—å" in values:
                                row["–†–∞–∑–Ω–∏—Ü–∞"] = values["ML-–º–æ–¥–µ–ª—å"] - values["OpenWeatherMap"]
                            else:
                                row["–†–∞–∑–Ω–∏—Ü–∞"] = None
                            comparison_rows.append(row)
                    
                        # –°–æ–∑–¥–∞–µ–º DataFrame
                        comparison_df = pd.DataFrame(comparison_rows)
                        comparison_df["–î–∞—Ç–∞"] = pd.to_datetime(comparison_df["–î–∞—Ç–∞"])
                        comparison_df = comparison_df.sort_values("–î–∞—Ç–∞")
                    
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        formatted_df = comparison_df.copy()
                        formatted_df["–î–∞—Ç–∞"] = formatted_df["–î–∞—Ç–∞"].dt.strftime("%d.%m.%Y")
                        formatted_df["OpenWeatherMap"] = formatted_df["OpenWeatherMap"].apply(lambda x: f"{x:.1f}¬∞C" if pd.notnull(x) else "–ù/–î")
                        formatted_df["ML-–º–æ–¥–µ–ª—å"] = formatted_df["ML-–º–æ–¥–µ–ª—å"].apply(lambda x: f"{x:.1f}¬∞C" if pd.notnull(x) else "–ù/–î")
                        formatted_df["–†–∞–∑–Ω–∏—Ü–∞"] = formatted_df["–†–∞–∑–Ω–∏—Ü–∞"].apply(
                            lambda x: f"{x:+.1f}¬∞C" if pd.notnull(x) else "–ù/–î"
                        )
                    
                        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                        st.dataframe(
                            formatted_df[["–î–∞—Ç–∞", "OpenWeatherMap", "ML-–º–æ–¥–µ–ª—å", "–†–∞–∑–Ω–∏—Ü–∞"]],
                            use_container_width=True,
                            hide_index=True
                        )
                    
                        # –î–∏–∞–≥—Ä–∞–º–º–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                        st.subheader("–î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞–∑–Ω–∏—Ü—ã –ø—Ä–æ–≥–Ω–æ–∑–æ–≤")
                    
                        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞–∑–Ω–∏—Ü—ã
                        comparison_df = comparison_df.dropna(subset=["–†–∞–∑–Ω–∏—Ü–∞"])
                        if not comparison_df.empty:
                            dates_fmt = comparison_df["–î–∞—Ç–∞"].dt.strftime("%d.%m")
                        
                            fig = go.Figure()
                        
                            fig.add_trace(go.Bar(
                                x=dates_fmt,
                                y=comparison_df["–†–∞–∑–Ω–∏—Ü–∞"],
                                marker_color=['green' if d >= 0 else 'red' for d in comparison_df["–†–∞–∑–Ω–∏—Ü–∞"]],
                                text=[f"{d:+.1f}¬∞C" for d in comparison_df["–†–∞–∑–Ω–∏—Ü–∞"]],
                                textposition='auto'
                            ))
                        
                            fig.update_layout(
                                title="–†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É ML-–º–æ–¥–µ–ª—å—é –∏ OpenWeatherMap (ML –º–∏–Ω—É—Å OWM)",
                                xaxis_title="–î–∞—Ç–∞",
                                yaxis_title="–†–∞–∑–Ω–∏—Ü–∞, ¬∞C",
                                height=350
                            )
                        
                            st.plotly_chart(fig, use_container_width=True)
                    else:
                        st.warning("ML-–ø—Ä–æ–≥–Ω–æ–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –í–∫–ª—é—á–∏—Ç–µ –æ–ø—Ü–∏—é 'ML-–ø—Ä–æ–≥–Ω–æ–∑'")
            
                with forecast_tabs[3]:
                    # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
                    if show_historical and 'historical_data' in weather_data and weather_data['historical_data']:
                        st.subheader("–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ")
                    
                        # –°–æ–∑–¥–∞–µ–º DataFrame
                        hist_data = pd.DataFrame([{
                            "–î–∞—Ç–∞": item['date'],
                            "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞": item['temperature'],
                            "–í–ª–∞–∂–Ω–æ—Å—Ç—å": item.get('humidity'),
                            "–î–∞–≤–ª–µ–Ω–∏–µ": item.get('pressure'),
                            "–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞": item.get('wind_speed')
                        } for item in weather_data['historical_data']])
                    
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
                        hist_data["–î–∞—Ç–∞"] = pd.to_datetime(hist_data["–î–∞—Ç–∞"])
                        hist_data = hist_data.sort_values("–î–∞—Ç–∞")
                    
                        # –ì—Ä–∞—Ñ–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
                        fig = px.line(
                            hist_data,
                            x="–î–∞—Ç–∞",
                            y="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞",
                            title=f"–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ {weather_data['city']}",
                            markers=True
                        )
                    
                        fig.update_layout(
                            xaxis_title="–î–∞—Ç–∞",
                            yaxis_title="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, ¬∞C",
                            height=350
                        )
                    
                        st.plotly_chart(fig, use_container_width=True)
                    
                        if show_details:
                            # –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                            st.subheader("–°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
                        
                            col1, col2, col3, col4 = st.columns(4)
                        
                            with col1:
                                st.metric("–°—Ä–µ–¥–Ω—è—è", f"{hist_data['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞'].mean():.1f}¬∞C")
                        
                            with col2:
                                st.metric("–ú–∏–Ω–∏–º—É–º", f"{hist_data['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞'].min():.1f}¬∞C")
                        
                            with col3:
                                st.metric("–ú–∞–∫—Å–∏–º—É–º", f"{hist_data['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞'].max():.1f}¬∞C")
                        
                            with col4:
                                temp_range = hist_data['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞'].max() - hist_data['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞'].min()
                                st.metric("–†–∞–∑–º–∞—Ö", f"{temp_range:.1f}¬∞C")
                        
                            # –¢–∞–±–ª–∏—Ü–∞ —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                            with st.expander("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ"):
                                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                                display_hist = hist_data.copy()
                                display_hist["–î–∞—Ç–∞"] = display_hist["–î–∞—Ç–∞"].dt.strftime("%d.%m.%Y")
                            
                                st.dataframe(
                                    display_hist,
                                    use_container_width=True,
                                    hide_index=True
                                )
                    else:
                        st.info("–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–∫—Ä—ã—Ç—ã. –í–∫–ª—é—á–∏—Ç–µ –æ–ø—Ü–∏—é '–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ'.")
            else:
                st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è '{city}'")
        else:
            st.info("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑'")
    
    # –í–ö–õ–ê–î–ö–ê 5: –û –ø—Ä–æ–µ–∫—Ç–µ
    with tab5:
        st.header("–û –ø—Ä–æ–µ–∫—Ç–µ")
        
        st.markdown("""
        ## –í–∞–ª—é—Ç–ê–Ω–∞–ª–∏—Ç–∏–∫–∞
        
        –ü—Ä–æ–µ–∫—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –ë–∞–Ω–∫–∞ –†–§.
        
        ### –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
        
        - **–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö**: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä —Ç–µ–∫—É—â–∏—Ö –∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
        - **–ê–Ω–∞–ª–∏–∑**: –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–∏–Ω–∞–º–∏–∫–∏ –∫—É—Ä—Å–æ–≤, –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –∏ —Ç—Ä–µ–Ω–¥–æ–≤
        - **–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ**: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –∫—É—Ä—Å–æ–≤
        - **–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è**: –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –∏ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        - **–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã**: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã
        - **–ú–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª–µ–π**: –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–µ–π —Å –ø–æ–º–æ—â—å—é R¬≤, MAE, RMSE –∏ –¥—Ä.
        
        ### –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:
        
        - **–ë—ç–∫–µ–Ω–¥**: Python, FastAPI, SQLite, pandas, scikit-learn
        - **–§—Ä–æ–Ω—Ç–µ–Ω–¥**: Streamlit, Plotly, HTML/CSS
        - **–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞**: Docker, Docker Compose
        
        ### –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:
        
        - **–ö–ª–∏–µ–Ω—Ç-—Å–µ—Ä–≤–µ—Ä–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞**: –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –±—ç–∫–µ–Ω–¥ (API) –∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)
        - **–ë—ç–∫–µ–Ω–¥ (FastAPI)**: API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –∏ –º–æ–¥–µ–ª—è–º–∏
        - **–§—Ä–æ–Ω—Ç–µ–Ω–¥ (Streamlit)**: –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        
        ### –í–µ—Ä—Å–∏—è: 2.0.0 (2025)
        """)

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {str(e)}")
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
        st.info(f"URL API: {API_URL}")
        
        if st.button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"):
            status, details = check_api_connection()
            if status:
                st.success(f"API –¥–æ—Å—Ç—É–ø–µ–Ω (–∫–æ–¥: {details})")
            else:
                st.error(f"API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {details}")
                st.info("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –±—ç–∫–µ–Ω–¥–∞ –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É.")