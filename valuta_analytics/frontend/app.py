import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import requests
import os
import json
from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–í–∞–ª—é—Ç–ê–Ω–∞–ª–∏—Ç–∏–∫–∞",
    page_icon="üí∞",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ API URL
API_URL = os.environ.get("API_URL", "http://backend:8000")

# –ë–∞–∑–æ–≤—ã–µ —Å—Ç–∏–ª–∏ CSS (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è)
st.markdown("""
<style>
    .main {
        background-color: #f8f9fa;
    }
    .stApp {
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
    }
    .card {
        background-color: white;
        border-radius: 0.5rem;
        padding: 1rem;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        margin-bottom: 1rem;
    }
    .header {
        margin-bottom: 1rem;
        padding: 0.5rem 0;
        border-bottom: 1px solid #e5e7eb;
    }
    .header h2 {
        margin: 0;
        font-size: 1.5rem;
        font-weight: 600;
    }
    .metric-row {
        display: flex;
        gap: 1rem;
        margin-bottom: 1rem;
    }
    .metric-card {
        background-color: white;
        border-radius: 0.5rem;
        padding: 0.75rem;
        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
        flex: 1;
    }
    .metric-title {
        font-size: 0.875rem;
        color: #6b7280;
        margin-bottom: 0.25rem;
    }
    .metric-value {
        font-size: 1.25rem;
        font-weight: 600;
    }
    .positive {
        color: #10b981;
    }
    .negative {
        color: #ef4444;
    }
    .neutral {
        color: #6b7280;
    }
    .metrics-table {
        width: 100%;
        border-collapse: collapse;
        margin: 1rem 0;
    }
    .metrics-table th {
        background-color: #f8f9fa;
        text-align: left;
        padding: 0.75rem;
        border-bottom: 1px solid #e5e7eb;
    }
    .metrics-table td {
        padding: 0.75rem;
        border-bottom: 1px solid #e5e7eb;
    }
    .model-quality {
        padding: 0.5rem 1rem;
        border-radius: 0.375rem;
        display: inline-block;
        font-weight: 600;
    }
    .model-quality.good {
        background-color: rgba(16, 185, 129, 0.1);
        color: #10b981;
    }
    .model-quality.medium {
        background-color: rgba(245, 158, 11, 0.1);
        color: #f59e0b;
    }
    .model-quality.poor {
        background-color: rgba(239, 68, 68, 0.1);
        color: #ef4444;
    }
</style>
""", unsafe_allow_html=True)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
@st.cache_data(ttl=300)
def get_currencies():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç"""
    try:
        response = requests.get(f"{API_URL}/currencies")
        response.raise_for_status()
        return response.json()
    except Exception as e:
        st.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞–ª—é—Ç–∞—Ö: {e}")
        return []

@st.cache_data(ttl=300)
def get_currency_history(currency_code, days=30):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç—ã"""
    try:
        response = requests.get(f"{API_URL}/currency/history/{currency_code}", params={"days": days})
        response.raise_for_status()
        data = response.json()
        df = pd.DataFrame(data)
        df['date'] = pd.to_datetime(df['date'])
        return df
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –≤–∞–ª—é—Ç—ã: {e}")
        return pd.DataFrame()

@st.cache_data(ttl=300)
def get_currency_statistics(currency_code, days=30):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≤–∞–ª—é—Ç–µ"""
    try:
        response = requests.get(f"{API_URL}/currency/statistics/{currency_code}", params={"days": days})
        response.raise_for_status()
        return response.json()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return None

def predict_currency(currency_code, days=7):
    """–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç—ã"""
    try:
        response = requests.post(f"{API_URL}/currency/predict/{currency_code}", params={"days": days})
        response.raise_for_status()
        return response.json()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
        return None

def update_current_data():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç"""
    try:
        response = requests.post(f"{API_URL}/data/update/current")
        response.raise_for_status()
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
        get_currencies.clear()
        get_last_update.clear()
        return response.json()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def update_historical_data(start_date, end_date):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        response = requests.post(
            f"{API_URL}/data/update/historical",
            params={"start_date": start_date, "end_date": end_date}
        )
        response.raise_for_status()
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
        get_currencies.clear()
        get_currency_history.clear()
        get_currency_statistics.clear()
        get_last_update.clear()
        return response.json()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        return {"status": "error", "message": str(e)}

def train_model(currency_code, days=60):
    """–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
    try:
        response = requests.post(f"{API_URL}/model/train/{currency_code}", params={"days": days})
        response.raise_for_status()
        return response.json()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {e}")
        return None

@st.cache_data(ttl=300)
def get_last_update():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    try:
        response = requests.get(f"{API_URL}/last-update")
        response.raise_for_status()
        return response.json().get("last_update", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        return f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö: {str(e)}"

@st.cache_data(ttl=300)
def get_weather(city, days_history=30, predict=True):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞"""
    try:
        params = {"days_history": days_history, "predict": str(predict).lower()}
        response = requests.get(f"{API_URL}/weather/{city}", params=params)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ: {e}")
        return None

@st.cache_data(ttl=3600)
def get_popular_cities():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤"""
    try:
        response = requests.get(f"{API_URL}/weather/popular-cities")
        response.raise_for_status()
        return response.json()
    except Exception as e:
        st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤")
        return []

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –º–æ–¥–µ–ª–µ–π
def calculate_model_metrics(y_true, y_pred):
    """–†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏"""
    metrics = {}
    
    # R-–∫–≤–∞–¥—Ä–∞—Ç (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∞—Ü–∏–∏)
    metrics['r2'] = r2_score(y_true, y_pred)
    
    # –°—Ä–µ–¥–Ω—è—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ (MAE)
    metrics['mae'] = mean_absolute_error(y_true, y_pred)
    
    # –ö–æ—Ä–µ–Ω—å –∏–∑ —Å—Ä–µ–¥–Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ–π –æ—à–∏–±–∫–∏ (RMSE)
    metrics['rmse'] = np.sqrt(mean_squared_error(y_true, y_pred))
    
    # –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ (MAPE)
    metrics['mape'] = np.mean(np.abs((y_true - y_pred) / y_true)) * 100
    
    # –°—Ä–µ–¥–Ω—è—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ (MRE)
    metrics['mre'] = np.mean(np.abs(y_true - y_pred) / np.mean(y_true)) * 100
    
    return metrics

def evaluate_model_quality(r2_score):
    """–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –¥–µ—Ç–µ—Ä–º–∏–Ω–∞—Ü–∏–∏"""
    if r2_score >= 0.7:
        return "good", "–•–æ—Ä–æ—à–∞—è"
    elif r2_score >= 0.5:
        return "medium", "–°—Ä–µ–¥–Ω—è—è"
    else:
        return "poor", "–ù–∏–∑–∫–∞—è"

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def get_currency_emoji(code):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –≤–∞–ª—é—Ç—ã –ø–æ –∫–æ–¥—É"""
    emoji_dict = {
        'USD': 'üá∫üá∏', 'EUR': 'üá™üá∫', 'GBP': 'üá¨üáß', 'JPY': 'üáØüáµ', 
        'CNY': 'üá®üá≥', 'CHF': 'üá®üá≠', 'AUD': 'üá¶üá∫', 'CAD': 'üá®üá¶'
    }
    return emoji_dict.get(code, 'üí±')

def translate_day_of_week(day):
    """–ü–µ—Ä–µ–≤–æ–¥ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π"""
    translations = {
        'Monday': '–ü–Ω', 'Tuesday': '–í—Ç', 'Wednesday': '–°—Ä',
        'Thursday': '–ß—Ç', 'Friday': '–ü—Ç', 'Saturday': '–°–±', 'Sunday': '–í—Å'
    }
    return translations.get(day, day)

def check_api_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API"""
    try:
        response = requests.get(f"{API_URL}/")
        return True, response.status_code
    except Exception as e:
        return False, str(e)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def main():
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    with st.sidebar:
        st.title("–í–∞–ª—é—Ç–ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
        
        st.header("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å API
        api_status, status_details = check_api_connection()
        if api_status:
            st.success(f"API –¥–æ—Å—Ç—É–ø–µ–Ω (–∫–æ–¥: {status_details})")
        else:
            st.error(f"API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {status_details}")
            st.warning(f"URL API: {API_URL}")
        
        # –°–µ–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        with st.expander("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"):
            if st.button("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã", key="load_current"):
                result = update_current_data()
                if result and result.get("status") == "success":
                    st.success(result["message"])
                else:
                    st.warning(result.get("message", "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"))
            
            st.subheader("–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
            col1, col2 = st.columns(2)
            with col1:
                historical_start = st.date_input(
                    "–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞",
                    datetime.now() - timedelta(days=30)
                )
            with col2:
                historical_end = st.date_input(
                    "–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞",
                    datetime.now()
                )
            
            if st.button("–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", key="load_history"):
                result = update_historical_data(
                    historical_start.strftime("%Y-%m-%d"),
                    historical_end.strftime("%Y-%m-%d")
                )
                if result and result.get("status") == "success":
                    st.success(result["message"])
                else:
                    st.warning(result.get("message", "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"))
        
        # –°–µ–∫—Ü–∏—è –º–æ–¥–µ–ª–∏
        with st.expander("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª—å—é"):
            currencies = get_currencies()
            currency_options = {curr["code"]: curr["name"] for curr in currencies} if currencies else {}
            
            if currency_options:
                selected_currency_code = st.selectbox(
                    "–í–∞–ª—é—Ç–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è",
                    options=list(currency_options.keys()),
                    format_func=lambda x: f"{x} - {currency_options[x]}"
                )
                
                training_days = st.slider("–î–Ω–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è", 30, 365, 60)
                
                if st.button("–û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å", key="train_model"):
                    result = train_model(selected_currency_code, training_days)
                    if result and result.get("status") == "success":
                        st.success(result["message"])
                    else:
                        st.warning(result.get("message", "–û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è"))
            else:
                st.warning("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –≤–∞–ª—é—Ç–∞—Ö")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
        st.caption(f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {get_last_update()}")
        st.caption("–í–µ—Ä—Å–∏—è 2.0.0")
    
    # –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
    tab1, tab2, tab3, tab4, tab5 = st.tabs(["üìä –¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã", "üìà –ê–Ω–∞–ª–∏–∑ –≤–∞–ª—é—Ç—ã", "üîÆ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ", "üå§ –ü–æ–≥–æ–¥–∞", "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ"])
    
    with tab1:
        st.header("–¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç")
        st.caption(f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {get_last_update()}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–∞–ª—é—Ç—ã
        currencies = get_currencies()
        
        if currencies:
            # –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
            col1, col2 = st.columns([1, 2])
            
            with col1:
                st.subheader("–û—Å–Ω–æ–≤–Ω—ã–µ –≤–∞–ª—é—Ç—ã")
                
                # –í—ã–±–∏—Ä–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–∞–ª—é—Ç—ã
                main_currencies = ['USD', 'EUR', 'GBP', 'JPY', 'CNY', 'CHF']
                main_curr_data = [curr for curr in currencies if curr["code"] in main_currencies]
                
                for curr in main_curr_data:
                    st.metric(
                        label=f"{get_currency_emoji(curr['code'])} {curr['code']} - {curr['name']}",
                        value=f"{curr['rate']:.4f} ‚ÇΩ"
                    )
            
            with col2:
                st.subheader("–î–∏–Ω–∞–º–∏–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤–∞–ª—é—Ç")
                
                # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫
                fig = go.Figure()
                loaded_currencies = []
                
                for code in main_currencies:
                    currency_data = [curr for curr in currencies if curr["code"] == code]
                    if currency_data:
                        history = get_currency_history(code, 30)
                        if not history.empty:
                            fig.add_trace(go.Scatter(
                                x=history['date'],
                                y=history['value'],
                                mode='lines',
                                name=code
                            ))
                            loaded_currencies.append(code)
                
                if loaded_currencies:
                    fig.update_layout(
                        title="–ö—É—Ä—Å—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π",
                        xaxis_title="–î–∞—Ç–∞",
                        yaxis_title="–ö—É—Ä—Å –∫ —Ä—É–±–ª—é",
                        height=400,
                        hovermode="x unified"
                    )
                    st.plotly_chart(fig, use_container_width=True)
                else:
                    st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
            
            # –¢–∞–±–ª–∏—Ü–∞ –≤—Å–µ—Ö –≤–∞–ª—é—Ç
            st.subheader("–í—Å–µ –≤–∞–ª—é—Ç—ã")
            
            # –ü–æ–∏—Å–∫ –ø–æ –≤–∞–ª—é—Ç–∞–º
            search_term = st.text_input("–ü–æ–∏—Å–∫ –≤–∞–ª—é—Ç—ã")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            currency_df = pd.DataFrame([
                {"–ö–æ–¥": curr["code"], "–ù–∞–∑–≤–∞–Ω–∏–µ": curr["name"], "–ö—É—Ä—Å –∫ —Ä—É–±–ª—é": curr["rate"]}
                for curr in currencies if curr["rate"] is not None
            ])
            
            if search_term:
                filtered_df = currency_df[
                    currency_df["–ö–æ–¥"].str.contains(search_term, case=False) | 
                    currency_df["–ù–∞–∑–≤–∞–Ω–∏–µ"].str.contains(search_term, case=False)
                ]
                st.dataframe(filtered_df, use_container_width=True)
            else:
                st.dataframe(currency_df, use_container_width=True)
        else:
            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞–ª—é—Ç–∞—Ö. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å.")
    
    with tab2:
        st.header("–ê–Ω–∞–ª–∏–∑ –≤–∞–ª—é—Ç—ã")
        
        currencies = get_currencies()
        currency_options = {curr["code"]: curr["name"] for curr in currencies} if currencies else {}
        
        if currency_options:
            # –í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            col1, col2 = st.columns([3, 1])
            
            with col1:
                selected_code = st.selectbox(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É",
                    options=list(currency_options.keys()),
                    format_func=lambda x: f"{x} - {currency_options[x]}"
                )
            
            with col2:
                days_to_analyze = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π", 7, 365, 30)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            currency_history = get_currency_history(selected_code, days_to_analyze)
            stats = get_currency_statistics(selected_code, days_to_analyze)
            
            if not currency_history.empty and stats:
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
                
                # –ú–µ—Ç—Ä–∏–∫–∏ –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö
                col1, col2, col3, col4 = st.columns(4)
                
                with col1:
                    st.metric(
                        "–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å", 
                        f"{stats['current_rate']:.4f} ‚ÇΩ"
                    )
                
                with col2:
                    st.metric(
                        "–°—Ä–µ–¥–Ω–∏–π –∫—É—Ä—Å", 
                        f"{stats['avg_rate']:.4f} ‚ÇΩ"
                    )
                
                with col3:
                    st.metric(
                        "–ú–∏–Ω–∏–º—É–º", 
                        f"{stats['min_rate']:.4f} ‚ÇΩ"
                    )
                
                with col4:
                    st.metric(
                        "–ú–∞–∫—Å–∏–º—É–º", 
                        f"{stats['max_rate']:.4f} ‚ÇΩ"
                    )
                
                # –¢—Ä–µ–Ω–¥ –∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                col1, col2 = st.columns(2)
                
                with col1:
                    trend_color = "positive" if stats['trend'] == "—Ä–∞—Å—Ç—É—â–∏–π" else "negative"
                    trend_icon = "‚Üó" if stats['trend'] == "—Ä–∞—Å—Ç—É—â–∏–π" else "‚Üò"
                    
                    st.markdown(f"""
                    <div class="metric-card">
                        <div class="metric-title">–¢—Ä–µ–Ω–¥</div>
                        <div class="metric-value {trend_color}">
                            {trend_icon} {stats['trend'].capitalize()} ({stats['trend_value']:.2f}%)
                        </div>
                    </div>
                    """, unsafe_allow_html=True)
                
                with col2:
                    st.markdown(f"""
                    <div class="metric-card">
                        <div class="metric-title">–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å</div>
                        <div class="metric-value neutral">
                            {stats['volatility']:.2f}%
                        </div>
                    </div>
                    """, unsafe_allow_html=True)
                
                # –ì—Ä–∞—Ñ–∏–∫ –∫—É—Ä—Å–∞
                st.subheader("–ì—Ä–∞—Ñ–∏–∫ –∫—É—Ä—Å–∞")
                
                fig = go.Figure()
                
                # –û—Å–Ω–æ–≤–Ω–∞—è –ª–∏–Ω–∏—è
                fig.add_trace(go.Scatter(
                    x=currency_history['date'],
                    y=currency_history['value'],
                    mode='lines',
                    name=selected_code
                ))
                
                # –°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ (7 –¥–Ω–µ–π)
                currency_history['ma7'] = currency_history['value'].rolling(window=7).mean()
                if len(currency_history) >= 7:
                    fig.add_trace(go.Scatter(
                        x=currency_history['date'],
                        y=currency_history['ma7'],
                        mode='lines',
                        name='7-–¥–Ω–µ–≤–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ',
                        line=dict(dash='dash')
                    ))
                
                fig.update_layout(
                    title=f"–î–∏–Ω–∞–º–∏–∫–∞ –∫—É—Ä—Å–∞ {selected_code} –∑–∞ {days_to_analyze} –¥–Ω–µ–π",
                    xaxis_title="–î–∞—Ç–∞",
                    yaxis_title="–ö—É—Ä—Å –∫ —Ä—É–±–ª—é",
                    height=400,
                    hovermode="x unified"
                )
                
                st.plotly_chart(fig, use_container_width=True)
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
                col1, col2 = st.columns(2)
                
                with col1:
                    st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–Ω–µ–≤–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    currency_history['pct_change'] = currency_history['value'].pct_change() * 100
                    
                    # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                    fig = px.histogram(
                        currency_history.dropna(),
                        x='pct_change',
                        nbins=15,
                        labels={'pct_change': '–î–Ω–µ–≤–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ, %'},
                        title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π"
                    )
                    
                    st.plotly_chart(fig, use_container_width=True)
                
                with col2:
                    st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    daily_changes = currency_history['pct_change'].dropna()
                    
                    # –î–Ω–∏ —Ä–æ—Å—Ç–∞/–ø–∞–¥–µ–Ω–∏—è
                    up_days = sum(daily_changes > 0)
                    down_days = sum(daily_changes < 0)
                    flat_days = sum(daily_changes == 0)
                    
                    # –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
                    fig = px.pie(
                        values=[up_days, down_days, flat_days],
                        names=['–†–æ—Å—Ç', '–ü–∞–¥–µ–Ω–∏–µ', '–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π'],
                        title="–î–Ω–∏ —Ä–æ—Å—Ç–∞ –∏ –ø–∞–¥–µ–Ω–∏—è"
                    )
                    
                    st.plotly_chart(fig, use_container_width=True)
                    
                    # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        avg_up = daily_changes[daily_changes > 0].mean() if any(daily_changes > 0) else 0
                        st.metric("–°—Ä–µ–¥–Ω–∏–π —Ä–æ—Å—Ç", f"+{avg_up:.2f}%")
                        
                        max_up = daily_changes.max()
                        st.metric("–ú–∞–∫—Å. —Ä–æ—Å—Ç", f"+{max_up:.2f}%")
                    
                    with col2:
                        avg_down = daily_changes[daily_changes < 0].mean() if any(daily_changes < 0) else 0
                        st.metric("–°—Ä–µ–¥–Ω–µ–µ –ø–∞–¥–µ–Ω–∏–µ", f"{avg_down:.2f}%")
                        
                        max_down = daily_changes.min()
                        st.metric("–ú–∞–∫—Å. –ø–∞–¥–µ–Ω–∏–µ", f"{max_down:.2f}%")
            else:
                st.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {selected_code}")
        else:
            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞–ª—é—Ç–∞—Ö. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å.")
    
    with tab3:
        st.header("–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç")
        
        currencies = get_currencies()
        currency_options = {curr["code"]: curr["name"] for curr in currencies} if currencies else {}
        
        if currency_options:
            # –í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            col1, col2, col3 = st.columns([3, 1, 1])
            
            with col1:
                selected_code = st.selectbox(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞",
                    options=list(currency_options.keys()),
                    format_func=lambda x: f"{x} - {currency_options[x]}",
                    key="predict_currency"
                )
            
            with col2:
                days_to_predict = st.slider("–î–Ω–µ–π –ø—Ä–æ–≥–Ω–æ–∑–∞", 1, 30, 7)
            
            with col3:
                predict_button = st.button("–°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑")
            
            if predict_button:
                with st.spinner('–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞...'):
                    prediction_result = predict_currency(selected_code, days_to_predict)
                    
                    if prediction_result:
                        history = get_currency_history(selected_code, 30)
                        
                        # –°–æ–∑–¥–∞–µ–º DataFrame —Å –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏
                        predictions = pd.DataFrame([
                            {"date": pd.to_datetime(p["date"]), "predicted_value": p["predicted_value"]}
                            for p in prediction_result["predictions"]
                        ])
                        
                        # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞
                        st.subheader("–ü—Ä–æ–≥–Ω–æ–∑ –∫—É—Ä—Å–∞")
                        
                        fig = go.Figure()
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
                        fig.add_trace(go.Scatter(
                            x=history['date'],
                            y=history['value'],
                            mode='lines',
                            name='–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ'
                        ))
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑
                        fig.add_trace(go.Scatter(
                            x=predictions['date'],
                            y=predictions['predicted_value'],
                            mode='lines+markers',
                            name='–ü—Ä–æ–≥–Ω–æ–∑',
                            line=dict(dash='dash')
                        ))
                        
                        fig.update_layout(
                            title=f"–ü—Ä–æ–≥–Ω–æ–∑ –∫—É—Ä—Å–∞ {selected_code} –Ω–∞ {days_to_predict} –¥–Ω–µ–π",
                            xaxis_title="–î–∞—Ç–∞",
                            yaxis_title="–ö—É—Ä—Å –∫ —Ä—É–±–ª—é",
                            height=400,
                            hovermode="x unified"
                        )
                        
                        st.plotly_chart(fig, use_container_width=True)
                        
                        # –¢–∞–±–ª–∏—Ü–∞ —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º
                        st.subheader("–î–µ—Ç–∞–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞")
                        
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        df_display = pd.DataFrame([
                            {
                                "–î–∞—Ç–∞": pd.to_datetime(p["date"]).strftime("%d.%m.%Y"),
                                "–ü—Ä–æ–≥–Ω–æ–∑ –∫—É—Ä—Å–∞": f"{p['predicted_value']:.4f} ‚ÇΩ",
                                "–ò–∑–º–µ–Ω–µ–Ω–∏–µ": f"{p['change_percent']:+.2f}%"
                            }
                            for p in prediction_result["predictions"]
                        ])
                        
                        st.dataframe(df_display, use_container_width=True)
                        
                        # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏
                        st.subheader("–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏")
                        
                        # –î–ª—è –æ—Ü–µ–Ω–∫–∏ –º–æ–¥–µ–ª–∏ –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                        # –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∏—Ö —Å "–ø—Ä–æ–≥–Ω–æ–∑–æ–º" –º–æ–¥–µ–ª–∏ –Ω–∞ —Ç–µ –∂–µ –¥–∞—Ç—ã
                        eval_history = history.copy().iloc[-7:]
                        
                        if len(eval_history) >= 3:  # –ú–∏–Ω–∏–º—É–º 3 —Ç–æ—á–∫–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫
                            # –ü–æ–ª—É—á–∞–µ–º "–ø—Ä–æ–≥–Ω–æ–∑—ã" –¥–ª—è —Ç–µ—Ö –∂–µ –¥–∞—Ç, —á—Ç–æ –∏ –≤ eval_history
                            X_eval = np.arange(len(eval_history)).reshape(-1, 1)
                            
                            # –õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è –¥–ª—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏
                            from sklearn.linear_model import LinearRegression
                            model = LinearRegression()
                            model.fit(X_eval, eval_history['value'])
                            eval_predictions = model.predict(X_eval)
                            
                            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
                            metrics = calculate_model_metrics(eval_history['value'].values, eval_predictions)
                            
                            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏
                            quality_class, quality_text = evaluate_model_quality(metrics['r2'])
                            
                            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏
                            st.markdown(f"""
                            <div style="margin-bottom: 1rem;">
                                <span class="model-quality {quality_class}">
                                    –ö–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏: {quality_text}
                                </span>
                            </div>
                            """, unsafe_allow_html=True)
                            
                            # –¢–∞–±–ª–∏—Ü–∞ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
                            st.markdown("""
                            <table class="metrics-table">
                                <tr>
                                    <th>–ú–µ—Ç—Ä–∏–∫–∞</th>
                                    <th>–ó–Ω–∞—á–µ–Ω–∏–µ</th>
                                    <th>–û–ø–∏—Å–∞–Ω–∏–µ</th>
                                </tr>
                                <tr>
                                    <td>R¬≤ (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∞—Ü–∏–∏)</td>
                                    <td>{:.4f}</td>
                                    <td>–î–æ–ª—è –¥–∏—Å–ø–µ—Ä—Å–∏–∏ –∑–∞–≤–∏—Å–∏–º–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π, –æ–±—ä—è—Å–Ω—è–µ–º–∞—è –º–æ–¥–µ–ª—å—é (0-1, —á–µ–º –±–ª–∏–∂–µ –∫ 1, —Ç–µ–º –ª—É—á—à–µ)</td>
                                </tr>
                                <tr>
                                    <td>MAE (—Å—Ä–µ–¥–Ω—è—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –æ—à–∏–±–∫–∞)</td>
                                    <td>{:.4f}</td>
                                    <td>–°—Ä–µ–¥–Ω–µ–µ –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –æ—à–∏–±–æ–∫ (—á–µ–º –º–µ–Ω—å—à–µ, —Ç–µ–º –ª—É—á—à–µ)</td>
                                </tr>
                                <tr>
                                    <td>RMSE (–∫–æ—Ä–µ–Ω—å –∏–∑ —Å—Ä–µ–¥–Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ–π –æ—à–∏–±–∫–∏)</td>
                                    <td>{:.4f}</td>
                                    <td>–ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫–æ—Ä–µ–Ω—å –∏–∑ —Å—Ä–µ–¥–Ω–µ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ –æ—à–∏–±–æ–∫ (—á–µ–º –º–µ–Ω—å—à–µ, —Ç–µ–º –ª—É—á—à–µ)</td>
                                </tr>
                                <tr>
                                    <td>MAPE (—Å—Ä–µ–¥–Ω—è—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è –æ—à–∏–±–∫–∞)</td>
                                    <td>{:.2f}%</td>
                                    <td>–°—Ä–µ–¥–Ω—è—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (—á–µ–º –º–µ–Ω—å—à–µ, —Ç–µ–º –ª—É—á—à–µ)</td>
                                </tr>
                                <tr>
                                    <td>MRE (—Å—Ä–µ–¥–Ω—è—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞)</td>
                                    <td>{:.2f}%</td>
                                    <td>–û—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–π –æ—à–∏–±–∫–∏ –∫ —Å—Ä–µ–¥–Ω–µ–º—É –∑–Ω–∞—á–µ–Ω–∏—é (—á–µ–º –º–µ–Ω—å—à–µ, —Ç–µ–º –ª—É—á—à–µ)</td>
                                </tr>
                            </table>
                            """.format(
                                metrics['r2'],
                                metrics['mae'],
                                metrics['rmse'],
                                metrics['mape'],
                                metrics['mre']
                            ), unsafe_allow_html=True)
                            
                            # –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ñ–∞–∫—Ç–∞ –∏ –ø—Ä–æ–≥–Ω–æ–∑–∞
                            st.subheader("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞–∫—Ç–∞ –∏ –º–æ–¥–µ–ª–∏")
                            
                            fig = go.Figure()
                            
                            # –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
                            fig.add_trace(go.Scatter(
                                x=eval_history['date'],
                                y=eval_history['value'],
                                mode='lines+markers',
                                name='–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è'
                            ))
                            
                            # –ü—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                            fig.add_trace(go.Scatter(
                                x=eval_history['date'],
                                y=eval_predictions,
                                mode='lines+markers',
                                name='–ü—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è',
                                line=dict(dash='dash')
                            ))
                            
                            fig.update_layout(
                                title=f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∏ –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π",
                                xaxis_title="–î–∞—Ç–∞",
                                yaxis_title="–ö—É—Ä—Å –∫ —Ä—É–±–ª—é",
                                height=400,
                                hovermode="x unified"
                            )
                            
                            st.plotly_chart(fig, use_container_width=True)
                        else:
                            st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏")
                        
                        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏
                        st.info(f"–ú–æ–¥–µ–ª—å: LinearRegression, –≤–µ—Ä—Å–∏—è: {prediction_result['model_version']}")
                    else:
                        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑")
        else:
            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞–ª—é—Ç–∞—Ö. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å.")
    
    with tab4:
        st.header("–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤
        popular_cities = get_popular_cities()
        city_names = [city["name"] for city in popular_cities]
        
        # –í—ã–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        col1, col2, col3, col4 = st.columns([2, 2, 1, 1])
        
        with col1:
            city = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥",
                options=[""] + city_names,
                index=0
            )
            if not city:
                city = st.text_input("–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞")
        
        with col2:
            days_history = st.slider(
                "–î–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
                min_value=7,
                max_value=60,
                value=30
            )
        
        with col3:
            predict = st.checkbox("ML-–ø—Ä–æ–≥–Ω–æ–∑", value=True)
        
        with col4:
            get_weather_btn = st.button("–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑")
        
        if city and get_weather_btn:
            with st.spinner(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {city}..."):
                weather_data = get_weather(city, days_history, predict)
            
            if weather_data:
                # –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞
                st.subheader(f"–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ –≤ {weather_data['city']}")
                
                # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                current = weather_data['current']
                col1, col2, col3, col4 = st.columns(4)
                
                with col1:
                    st.metric(
                        "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", 
                        f"{current['temperature']:.1f}¬∞C", 
                        f"{current['feels_like'] - current['temperature']:+.1f}¬∞C"
                    )
                
                with col2:
                    st.metric("–í–ª–∞–∂–Ω–æ—Å—Ç—å", f"{current['humidity']}%")
                
                with col3:
                    st.metric("–î–∞–≤–ª–µ–Ω–∏–µ", f"{current['pressure']} –≥–ü–∞")
                
                with col4:
                    st.metric("–í–µ—Ç–µ—Ä", f"{current['wind_speed']} –º/—Å")
                
                st.info(f"**–û–ø–∏—Å–∞–Ω–∏–µ**: {current['description']}")
                
                # –ü—Ä–æ–≥–Ω–æ–∑
                st.subheader("–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã")
                
                forecast_tabs = st.tabs(["–ì—Ä–∞—Ñ–∏–∫", "–¢–∞–±–ª–∏—Ü–∞", "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ", "–ú–µ—Ç—Ä–∏–∫–∏ ML"])
                
                with forecast_tabs[0]:
                    # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
                    df_forecast = pd.DataFrame([
                        {
                            "–î–∞—Ç–∞": day['date'],
                            "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞": day['temperature'],
                            "–ò—Å—Ç–æ—á–Ω–∏–∫": "OpenWeatherMap"
                        }
                        for day in weather_data['forecast']
                    ])
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º ML –ø—Ä–æ–≥–Ω–æ–∑
                    if 'predictions' in weather_data and weather_data['predictions']:
                        for pred in weather_data['predictions']:
                            df_forecast = pd.concat([df_forecast, pd.DataFrame([{
                                "–î–∞—Ç–∞": pred['date'],
                                "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞": pred['predicted_temperature'],
                                "–ò—Å—Ç–æ—á–Ω–∏–∫": "ML-–º–æ–¥–µ–ª—å"
                            }])], ignore_index=True)
                    
                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
                    df_forecast['–î–∞—Ç–∞'] = pd.to_datetime(df_forecast['–î–∞—Ç–∞'])
                    df_forecast = df_forecast.sort_values('–î–∞—Ç–∞')
                    
                    # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
                    df_forecast['–î–∞—Ç–∞_—Ñ–æ—Ä–º–∞—Ç'] = df_forecast['–î–∞—Ç–∞'].dt.strftime("%d.%m")
                    
                    # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫
                    fig = px.line(
                        df_forecast, 
                        x="–î–∞—Ç–∞_—Ñ–æ—Ä–º–∞—Ç", 
                        y="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", 
                        color="–ò—Å—Ç–æ—á–Ω–∏–∫",
                        markers=True,
                        title="–ü—Ä–æ–≥–Ω–æ–∑ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã"
                    )
                    
                    fig.update_layout(
                        xaxis_title="–î–∞—Ç–∞",
                        yaxis_title="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, ¬∞C",
                        height=350,
                        hovermode="x unified"
                    )
                    
                    st.plotly_chart(fig, use_container_width=True)
                
                with forecast_tabs[1]:
                    # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞
                    forecast_data = []
                    for day in weather_data['forecast']:
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É
                        date_obj = datetime.strptime(day['date'], "%Y-%m-%d")
                        date_formatted = date_obj.strftime("%d.%m.%Y")
                        day_of_week = translate_day_of_week(date_obj.strftime("%A"))
                        
                        forecast_data.append({
                            "–î–∞—Ç–∞": f"{date_formatted} ({day_of_week})",
                            "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞": f"{day['temperature']:.1f}¬∞C",
                            "–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫": f"{day['feels_like']:.1f}¬∞C",
                            "–í–ª–∞–∂–Ω–æ—Å—Ç—å": f"{day['humidity']}%",
                            "–í–µ—Ç–µ—Ä": f"{day['wind_speed']} –º/—Å",
                            "–û–ø–∏—Å–∞–Ω–∏–µ": day['description'].capitalize()
                        })
                    
                    if forecast_data:
                        st.dataframe(pd.DataFrame(forecast_data), use_container_width=True)
                    else:
                        st.info("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                
                with forecast_tabs[2]:
                    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ OpenWeatherMap –∏ ML-–º–æ–¥–µ–ª–∏
                    if 'predictions' in weather_data and weather_data['predictions']:
                        st.subheader("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤")
                        
                        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                        compare_data = {}
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã –∏–∑ API
                        for day in weather_data['forecast']:
                            date = day['date']
                            compare_data[date] = {"OpenWeatherMap": day['temperature']}
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º ML –ø—Ä–æ–≥–Ω–æ–∑—ã
                        for pred in weather_data['predictions']:
                            date = pred['date']
                            if date in compare_data:
                                compare_data[date]["ML-–º–æ–¥–µ–ª—å"] = pred['predicted_temperature']
                            else:
                                compare_data[date] = {"ML-–º–æ–¥–µ–ª—å": pred['predicted_temperature']}
                        
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame
                        comparison_rows = []
                        for date, values in compare_data.items():
                            row = {"–î–∞—Ç–∞": date}
                            row.update(values)
                            if "OpenWeatherMap" in values and "ML-–º–æ–¥–µ–ª—å" in values:
                                row["–†–∞–∑–Ω–∏—Ü–∞"] = values["ML-–º–æ–¥–µ–ª—å"] - values["OpenWeatherMap"]
                            else:
                                row["–†–∞–∑–Ω–∏—Ü–∞"] = None
                            comparison_rows.append(row)
                        
                        # –°–æ–∑–¥–∞–µ–º DataFrame
                        comparison_df = pd.DataFrame(comparison_rows)
                        comparison_df["–î–∞—Ç–∞"] = pd.to_datetime(comparison_df["–î–∞—Ç–∞"])
                        comparison_df = comparison_df.sort_values("–î–∞—Ç–∞")
                        
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        formatted_df = comparison_df.copy()
                        formatted_df["–î–∞—Ç–∞"] = formatted_df["–î–∞—Ç–∞"].dt.strftime("%d.%m.%Y")
                        formatted_df["OpenWeatherMap"] = formatted_df["OpenWeatherMap"].apply(lambda x: f"{x:.1f}¬∞C" if pd.notnull(x) else "–ù/–î")
                        formatted_df["ML-–º–æ–¥–µ–ª—å"] = formatted_df["ML-–º–æ–¥–µ–ª—å"].apply(lambda x: f"{x:.1f}¬∞C" if pd.notnull(x) else "–ù/–î")
                        formatted_df["–†–∞–∑–Ω–∏—Ü–∞"] = formatted_df["–†–∞–∑–Ω–∏—Ü–∞"].apply(
                            lambda x: f"{x:+.1f}¬∞C" if pd.notnull(x) else "–ù/–î"
                        )
                        
                        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                        st.dataframe(
                            formatted_df[["–î–∞—Ç–∞", "OpenWeatherMap", "ML-–º–æ–¥–µ–ª—å", "–†–∞–∑–Ω–∏—Ü–∞"]],
                            use_container_width=True
                        )
                        
                        # –°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞
                        st.subheader("–í–∏–∑—É–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ")
                        
                        fig = go.Figure()
                        
                        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
                        dates = comparison_df["–î–∞—Ç–∞"].dt.strftime("%d.%m")
                        
                        # OpenWeatherMap
                        fig.add_trace(go.Bar(
                            x=dates,
                            y=comparison_df["OpenWeatherMap"],
                            name="OpenWeatherMap"
                        ))
                        
                        # ML-–º–æ–¥–µ–ª—å
                        fig.add_trace(go.Bar(
                            x=dates,
                            y=comparison_df["ML-–º–æ–¥–µ–ª—å"],
                            name="ML-–º–æ–¥–µ–ª—å"
                        ))
                        
                        fig.update_layout(
                            title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤",
                            xaxis_title="–î–∞—Ç–∞",
                            yaxis_title="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, ¬∞C",
                            barmode="group",
                            height=350
                        )
                        
                        st.plotly_chart(fig, use_container_width=True)
                    else:
                        st.warning("ML-–ø—Ä–æ–≥–Ω–æ–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –í–∫–ª—é—á–∏—Ç–µ –æ–ø—Ü–∏—é 'ML-–ø—Ä–æ–≥–Ω–æ–∑'.")
                
                with forecast_tabs[3]:
                    # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ ML-–º–æ–¥–µ–ª–∏ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã
                    if 'predictions' in weather_data and weather_data['predictions'] and 'forecast' in weather_data:
                        st.subheader("–ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ ML-–º–æ–¥–µ–ª–∏")
                        
                        # –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–∞—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
                        owm_dates = {day['date']: day['temperature'] for day in weather_data['forecast']}
                        ml_dates = {pred['date']: pred['predicted_temperature'] for pred in weather_data['predictions']}
                        
                        # –ù–∞—Ö–æ–¥–∏–º –æ–±—â–∏–µ –¥–∞—Ç—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                        common_dates = list(set(owm_dates.keys()) & set(ml_dates.keys()))
                        
                        if common_dates:
                            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
                            common_dates.sort()
                            
                            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
                            owm_values = [owm_dates[date] for date in common_dates]
                            ml_values = [ml_dates[date] for date in common_dates]
                            
                            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è ML-–º–æ–¥–µ–ª–∏ —Å OpenWeatherMap
                            metrics = calculate_model_metrics(np.array(owm_values), np.array(ml_values))
                            
                            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏
                            quality_class, quality_text = evaluate_model_quality(metrics['r2'])
                            
                            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏
                            st.markdown(f"""
                            <div style="margin-bottom: 1rem;">
                                <span class="model-quality {quality_class}">
                                    –ö–∞—á–µ—Å—Ç–≤–æ ML-–º–æ–¥–µ–ª–∏: {quality_text}
                                </span>
                            </div>
                            """, unsafe_allow_html=True)
                            
                            # –¢–∞–±–ª–∏—Ü–∞ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
                            st.markdown("""
                            <table class="metrics-table">
                                <tr>
                                    <th>–ú–µ—Ç—Ä–∏–∫–∞</th>
                                    <th>–ó–Ω–∞—á–µ–Ω–∏–µ</th>
                                    <th>–û–ø–∏—Å–∞–Ω–∏–µ</th>
                                </tr>
                                <tr>
                                    <td>R¬≤ (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∞—Ü–∏–∏)</td>
                                    <td>{:.4f}</td>
                                    <td>–î–æ–ª—è –¥–∏—Å–ø–µ—Ä—Å–∏–∏ –∑–∞–≤–∏—Å–∏–º–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π, –æ–±—ä—è—Å–Ω—è–µ–º–∞—è –º–æ–¥–µ–ª—å—é (0-1, —á–µ–º –±–ª–∏–∂–µ –∫ 1, —Ç–µ–º –ª—É—á—à–µ)</td>
                                </tr>
                                <tr>
                                    <td>MAE (—Å—Ä–µ–¥–Ω—è—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –æ—à–∏–±–∫–∞)</td>
                                    <td>{:.4f} ¬∞C</td>
                                    <td>–°—Ä–µ–¥–Ω–µ–µ –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –æ—à–∏–±–æ–∫ (—á–µ–º –º–µ–Ω—å—à–µ, —Ç–µ–º –ª—É—á—à–µ)</td>
                                </tr>
                                <tr>
                                    <td>RMSE (–∫–æ—Ä–µ–Ω—å –∏–∑ —Å—Ä–µ–¥–Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ–π –æ—à–∏–±–∫–∏)</td>
                                    <td>{:.4f} ¬∞C</td>
                                    <td>–ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫–æ—Ä–µ–Ω—å –∏–∑ —Å—Ä–µ–¥–Ω–µ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ –æ—à–∏–±–æ–∫ (—á–µ–º –º–µ–Ω—å—à–µ, —Ç–µ–º –ª—É—á—à–µ)</td>
                                </tr>
                                <tr>
                                    <td>MAPE (—Å—Ä–µ–¥–Ω—è—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è –æ—à–∏–±–∫–∞)</td>
                                    <td>{:.2f}%</td>
                                    <td>–°—Ä–µ–¥–Ω—è—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (—á–µ–º –º–µ–Ω—å—à–µ, —Ç–µ–º –ª—É—á—à–µ)</td>
                                </tr>
                                <tr>
                                    <td>MRE (—Å—Ä–µ–¥–Ω—è—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞)</td>
                                    <td>{:.2f}%</td>
                                    <td>–û—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–π –æ—à–∏–±–∫–∏ –∫ —Å—Ä–µ–¥–Ω–µ–º—É –∑–Ω–∞—á–µ–Ω–∏—é (—á–µ–º –º–µ–Ω—å—à–µ, —Ç–µ–º –ª—É—á—à–µ)</td>
                                </tr>
                            </table>
                            """.format(
                                metrics['r2'],
                                metrics['mae'],
                                metrics['rmse'],
                                metrics['mape'],
                                metrics['mre']
                            ), unsafe_allow_html=True)
                            
                            # –ì—Ä–∞—Ñ–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π
                            st.subheader("–ì—Ä–∞—Ñ–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π")
                            
                            deviations = [ml - owm for ml, owm in zip(ml_values, owm_values)]
                            dates_fmt = [datetime.strptime(date, "%Y-%m-%d").strftime("%d.%m") for date in common_dates]
                            
                            fig = go.Figure()
                            
                            # –û—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
                            fig.add_trace(go.Bar(
                                x=dates_fmt,
                                y=deviations,
                                marker_color=['red' if d < 0 else 'green' for d in deviations]
                            ))
                            
                            # –ù—É–ª–µ–≤–∞—è –ª–∏–Ω–∏—è
                            fig.add_shape(
                                type="line",
                                x0=0,
                                y0=0,
                                x1=1,
                                y1=0,
                                xref="paper",
                                line=dict(
                                    color="black",
                                    width=1,
                                    dash="dot",
                                )
                            )
                            
                            fig.update_layout(
                                title="–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ ML-–º–æ–¥–µ–ª–∏ –æ—Ç OpenWeatherMap",
                                xaxis_title="–î–∞—Ç–∞",
                                yaxis_title="–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ, ¬∞C",
                                height=350
                            )
                            
                            st.plotly_chart(fig, use_container_width=True)
                            
                            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –º–æ–¥–µ–ª–∏
                            st.subheader("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –º–æ–¥–µ–ª–∏")
                            
                            if metrics['r2'] < 0.5:
                                st.warning("""
                                **–ú–æ–¥–µ–ª—å —Ç—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è!**
                                
                                –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
                                1. –£–≤–µ–ª–∏—á—å—Ç–µ –æ–±—ä–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
                                2. –î–æ–±–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ (–≤–ª–∞–∂–Ω–æ—Å—Ç—å, –¥–∞–≤–ª–µ–Ω–∏–µ, —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å)
                                3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã (–≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π –±—É—Å—Ç–∏–Ω–≥, –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏)
                                4. –†–∞–∑–¥–µ–ª–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Å–µ–∑–æ–Ω–∞–º –∏ –æ–±—É—á–∏—Ç–µ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏
                                """)
                            elif metrics['r2'] < 0.7:
                                st.info("""
                                **–ú–æ–¥–µ–ª—å —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏.**
                                
                                –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
                                1. –£–≤–µ–ª–∏—á—å—Ç–µ –æ–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
                                2. –î–æ–±–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
                                3. –ü—Ä–æ–≤–µ–¥–∏—Ç–µ —Ç—â–∞—Ç–µ–ª—å–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                                """)
                            else:
                                st.success("""
                                **–ú–æ–¥–µ–ª—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ö–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!**
                                
                                –î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è:
                                1. –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–æ–±—É—á–∞–π—Ç–µ –º–æ–¥–µ–ª—å –Ω–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                                2. –î–æ–±–∞–≤—å—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥—Ä–µ–π—Ñ–∞ –¥–∞–Ω–Ω—ã—Ö
                                """)
                        else:
                            st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤")
                    else:
                        st.warning("ML-–ø—Ä–æ–≥–Ω–æ–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –í–∫–ª—é—á–∏—Ç–µ –æ–ø—Ü–∏—é 'ML-–ø—Ä–æ–≥–Ω–æ–∑'.")
                
                # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
                if 'historical_data' in weather_data and weather_data['historical_data']:
                    st.subheader("–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ")
                    
                    # –°–æ–∑–¥–∞–µ–º DataFrame
                    hist_data = pd.DataFrame([{
                        "–î–∞—Ç–∞": item['date'],
                        "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞": item['temperature'],
                        "–í–ª–∞–∂–Ω–æ—Å—Ç—å": item.get('humidity'),
                        "–î–∞–≤–ª–µ–Ω–∏–µ": item.get('pressure'),
                        "–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞": item.get('wind_speed')
                    } for item in weather_data['historical_data']])
                    
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
                    hist_data["–î–∞—Ç–∞"] = pd.to_datetime(hist_data["–î–∞—Ç–∞"])
                    hist_data = hist_data.sort_values("–î–∞—Ç–∞")
                    
                    # –ì—Ä–∞—Ñ–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
                    fig = px.line(
                        hist_data,
                        x="–î–∞—Ç–∞",
                        y="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞",
                        title=f"–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ {weather_data['city']}"
                    )
                    
                    fig.update_layout(
                        xaxis_title="–î–∞—Ç–∞",
                        yaxis_title="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, ¬∞C",
                        height=350
                    )
                    
                    st.plotly_chart(fig, use_container_width=True)
                    
                    # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                    col1, col2, col3, col4 = st.columns(4)
                    
                    with col1:
                        st.metric("–°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", f"{hist_data['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞'].mean():.1f}¬∞C")
                    
                    with col2:
                        st.metric("–ú–∏–Ω–∏–º—É–º", f"{hist_data['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞'].min():.1f}¬∞C")
                    
                    with col3:
                        st.metric("–ú–∞–∫—Å–∏–º—É–º", f"{hist_data['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞'].max():.1f}¬∞C")
                    
                    with col4:
                        temp_range = hist_data['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞'].max() - hist_data['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞'].min()
                        st.metric("–†–∞–∑–º–∞—Ö", f"{temp_range:.1f}¬∞C")
            else:
                st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è '{city}'")
        else:
            st.info("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑'")
    
    with tab5:
        st.header("–û –ø—Ä–æ–µ–∫—Ç–µ")
        
        st.markdown("""
        ## –í–∞–ª—é—Ç–ê–Ω–∞–ª–∏—Ç–∏–∫–∞
        
        –ü—Ä–æ–µ–∫—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –ë–∞–Ω–∫–∞ –†–§.
        
        ### –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
        
        - **–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö**: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä —Ç–µ–∫—É—â–∏—Ö –∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
        - **–ê–Ω–∞–ª–∏–∑**: –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–∏–Ω–∞–º–∏–∫–∏ –∫—É—Ä—Å–æ–≤, –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –∏ —Ç—Ä–µ–Ω–¥–æ–≤
        - **–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ**: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –∫—É—Ä—Å–æ–≤
        - **–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è**: –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –∏ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        - **–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã**: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã
        - **–ú–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª–µ–π**: –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–µ–π —Å –ø–æ–º–æ—â—å—é R¬≤, MAE, RMSE –∏ –¥—Ä.
        
        ### –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:
        
        - **–ë—ç–∫–µ–Ω–¥**: Python, FastAPI, SQLite, pandas, scikit-learn
        - **–§—Ä–æ–Ω—Ç–µ–Ω–¥**: Streamlit, Plotly, HTML/CSS
        - **–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞**: Docker, Docker Compose
        
        ### –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:
        
        - **–ö–ª–∏–µ–Ω—Ç-—Å–µ—Ä–≤–µ—Ä–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞**: –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –±—ç–∫–µ–Ω–¥ (API) –∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)
        - **–ë—ç–∫–µ–Ω–¥ (FastAPI)**: API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –∏ –º–æ–¥–µ–ª—è–º–∏
        - **–§—Ä–æ–Ω—Ç–µ–Ω–¥ (Streamlit)**: –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        
        ### –í–µ—Ä—Å–∏—è: 2.0.0 (2025)
        """)

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {str(e)}")
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
        st.info(f"URL API: {API_URL}")
        
        if st.button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"):
            status, details = check_api_connection()
            if status:
                st.success(f"API –¥–æ—Å—Ç—É–ø–µ–Ω (–∫–æ–¥: {details})")
            else:
                st.error(f"API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {details}")
                st.info("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –±—ç–∫–µ–Ω–¥–∞ –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É.")